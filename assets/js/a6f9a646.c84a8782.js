"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4358],{8986:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/2023/11/21/Proyecto SPA con Vite y Bootstrap","metadata":{"permalink":"/vanillaPill/blog/2023/11/21/Proyecto SPA con Vite y Bootstrap","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-11-21-Proyecto SPA con Vite y Bootstrap.md","source":"@site/blog/2023-11-21-Proyecto SPA con Vite y Bootstrap.md","title":"Construyendo nuestra SPA","description":"Vamos a crear una infraestructura b\xe1sica para la creaci\xf3n de una SPA utilizando Vite.","date":"2023-11-21T00:00:00.000Z","formattedDate":"21 de noviembre de 2023","tags":[],"readingTime":12.92,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"nextItem":{"title":"Usando Bootstrap para la validaci\xf3n","permalink":"/vanillaPill/blog/2023/11/20/Validaci\xf3n con Bootstrap"}},"content":"Vamos a crear una infraestructura b\xe1sica para la creaci\xf3n de una SPA utilizando `Vite`. \\r\\nTambi\xe9n crearemos un repositorio en `Github` y desplegaremos la app en `Github Pages`.\\r\\n\\r\\n## Esto es lo que vamos a hacer:\\r\\n\\r\\n1. Instalaremos **Node.js** que a su vez instalar\xe1 **npm**\\r\\n2. Crearemos un **proyecto html/javascript** utilizando vite dentro de nuestra carpeta de proyecto\\r\\n3. Analizaremos el proyecto ejemplo para comprender la estructura de archivos que incluye una spa.\\r\\n4. Modificaremos el **scaffolding** (las carpetas y archivos) de nuestro proyecto con algunos \'componentes\' b\xe1sicos.\\r\\n5. Crearemos el archivo **vite.config** y verificamos que todo funciona de forma correcta\\r\\n6. Instalaremos Bootstrap y Bootswach\\r\\n7. Instalaremos ESLint\\r\\n8. Crearemos un sistema de despliegue continuo basado en GitHub Pages utilizando la dependencia **gh-pages**.\\r\\n\\r\\n### 1. Instalando Node.js\\r\\n\\r\\nEste apartado no tiene misterio. Te vas a la [web de Node.js](https://nodejs.org/es) y  descargas el paquete correspondiente a tu sistema operativo y lo instalas. (Ya sabes: continuar, continuar, continuar...)\\r\\n\\r\\n:::tip \\r\\nPuede que ya tengas instalado nodejs. Si quieres comprobarlo y saber la versi\xf3n que hay instalada: \\r\\n1. Abre un terminal \\r\\n2. Escribe ```node -v``` .Te aparecer\xe1 la versi\xf3n actual de Nodejs.\\r\\n\\r\\nSi la versi\xf3n que tienes no est\xe1 actualizada, entonces descarga el instalador de la web oficial y ejecutalo para actualizar Nodejs.\\r\\n:::\\r\\n\\r\\n\\r\\n### 2. Construyendo una app con vite\\r\\n- En primer lugar debemos asegurarnos de cambiar a la rama `main`. Veremos que en la raiz de nuestro proyecto solo tenemos el archivo *readme.md*\\r\\n- Abrimos un terminal en el propio VSCode (`ctrl+mayus+\xf1`) para crear nuestro proyecto. Ejecuta la siguiente linea de c\xf3digo. \\r\\n  :::note No olvides el punto\\r\\n  El punto significa que debe crearse el proyecto en la misma carpeta que est\xe1s ahora mismo, es decir, en vanillagames10\\r\\n  :::\\r\\n\\r\\n  ```\\r\\n  npm create vite .\\r\\n  ```\\r\\n- Te preguntar\xe1 si quieres borrar los archivos que hay en la carpeta. Dile que s\xed, porque lo \xfanico que tenemos es el readme.md que ya ver\xe1s que nos va a respetar.\\r\\n- Indicaremos que queremos un proyecto basado en **Vanilla** javascript (es decir, javascript puro)\\r\\n- Indicaremos que usamos **javascript** (no queremos typescript)\\r\\n- En este momento nos habr\xe1 creado los archivos y las carpetas b\xe1sicas para una app. Solo nos falta instalar las dependencias. Para ello usamos npm desde el terminal:\\r\\n  ```\\r\\n  npm install\\r\\n  ```\\r\\n  F\xedjate que ahora se ha creado una carpeta nueva llamada node_modules. Aqu\xed est\xe1n instaladas todas las librerias que vamos a necesitar. (De momento, esa carpeta mejor no tocarla \ud83d\ude05)\\r\\n- Para acabar vamos a levantar un servidor de pruebas. Si abrimos esta url en un navegador podremos ver como va quedando nuestro proyecto. De momento veremos la plantilla b\xe1sica que nos ofrece vite.\\r\\n  ```\\r\\n  npm run dev\\r\\n  ```\\r\\n\\r\\n  ```\\r\\n  VITE v4.4.9  ready in 199 ms\\r\\n\\r\\n  \u279c  Local:   http://localhost:5173/\\r\\n  \u279c  Network: use --host to expose\\r\\n  \u279c  press h to show help\\r\\n  ```\\r\\n![localhost](/imagenes/v1/spa/localhost.png)\\r\\n\\r\\n:::danger Commit\\r\\n\xbfQue tal un commit antes de seguir?   Podr\xeda ser algo as\xed: \\r\\n\\r\\n  \\"*Crea proyecto con vite*\\"\\r\\n\\r\\n(Por cierto, aseg\xfarate de estar en la **rama main**.)\\r\\n\\r\\n:::\\r\\n\\r\\n### 3. Analizando el proyecto de ejemplo\\r\\nVeamos los archivos y carpetas que nos ha creado vite:\\r\\n\\r\\n![Scaffolding](/imagenes/v1/spa/scaffolding.png)\\r\\n\\r\\nLos archivos m\xe1s importante son el `index.html` y `main.js`\\r\\n\\r\\n```html title=\\"index.html\\"\\r\\n<!DOCTYPE html>\\r\\n<html lang=\\"en\\">\\r\\n  <head>\\r\\n    <meta charset=\\"UTF-8\\" />\\r\\n    <link rel=\\"icon\\" type=\\"image/svg+xml\\" href=\\"/vite.svg\\" />\\r\\n    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1.0\\" />\\r\\n    <title>Vite App</title>\\r\\n  </head>\\r\\n  <body>\\r\\n    <div id=\\"app\\"></div>\\r\\n    <script type=\\"module\\" src=\\"/main.js\\"><\/script>\\r\\n  </body>\\r\\n</html>\\r\\n\\r\\n```\\r\\n\\r\\n\\r\\n\\r\\nLo que tenemos aqu\xed es un index.html que se cargar\xe1 en el navegador. Este tiene un div con id=\\"app\\". En este div es donde se inyecta toda la aplicaci\xf3n. **\xa1Y no tenemos nada m\xe1s!** El resto de los componentes se ir\xe1n contruyendo desde javascript.\\r\\n\\r\\nEste es el archivo main.js que cargamos desde index.html:\\r\\n\\r\\n```javascript title=\\"main.js\\"\\r\\nimport \'./style.css\'\\r\\nimport javascriptLogo from \'./javascript.svg\'\\r\\nimport { setupCounter } from \'./counter.js\'\\r\\n\\r\\ndocument.querySelector(\'#app\').innerHTML = `\\r\\n  <div>\\r\\n    <a href=\\"https://vitejs.dev\\" target=\\"_blank\\">\\r\\n      <img src=\\"/vite.svg\\" class=\\"logo\\" alt=\\"Vite logo\\" />\\r\\n    </a>\\r\\n    <a href=\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript\\" target=\\"_blank\\">\\r\\n      <img src=\\"${javascriptLogo}\\" class=\\"logo vanilla\\" alt=\\"JavaScript logo\\" />\\r\\n    </a>\\r\\n    <h1>Hello Vite!</h1>\\r\\n    <div class=\\"card\\">\\r\\n      <button id=\\"counter\\" type=\\"button\\"></button>\\r\\n    </div>\\r\\n    <p class=\\"read-the-docs\\">\\r\\n      Click on the Vite logo to learn more\\r\\n    </p>\\r\\n  </div>\\r\\n`\\r\\n\\r\\nsetupCounter(document.querySelector(\'#counter\'))\\r\\n\\r\\n```\\r\\n\\r\\nEn el main.js podemos ver como inicialmente cargamos tres archivos, el style.css, un archivo .svg (una imagen) y el archivo counter.js, el cual tiene el c\xf3digo correspondiente al contador que hemos visto en la p\xe1gina principal. \\r\\n\\r\\nA continuacion, haciendo uso de `innerHTML` inyectamos en el div \'app\' un fragmento de c\xf3digo html (un div que incluye unos enlaces, un bot\xf3n, una imagen, etc.). \\r\\n\\r\\nEs decir, **estamos construyendo la p\xe1gina desde el archivo main.js**\\r\\n\\r\\nAhora que vemos de qu\xe9 va esto, vamos a contruir nuestra propia estructura para el proyecto que estamos desarrollando.\\r\\n\\r\\n### 4. Modificando nuestro Scaffolding\\r\\nHemos visto que todo funciona bien. De momento... Porque ahora vamos a contruir la estructura de archivos con una vista principal y algunos objetos a modo de componentes.\\r\\n\\r\\nHagamos lo siguiente:\\r\\n- Eliminamos los archivos counter.js, index.html, main.js y style.css y creamos una estructura de carpetas como esta:\\r\\n```\\r\\n        node_modules  \\r\\n        src\\r\\n            componentes\\r\\n                header.js\\r\\n                footer.js\\r\\n            vistas\\r\\n                homeVista.js\\r\\n            index.html \\r\\n            main.js\\r\\n        .gitignore  \\r\\n        package.json  \\r\\n        package-lock.json  \\r\\n```\\r\\n\\r\\n- Modificamos `index.html` para que solo tenga las etiquetas header, main y footer y enlazamos el archivo main.js\\r\\n```html title=\\"index.html\\"\\r\\n        <!DOCTYPE html>\\r\\n        <html lang=\\"es\\">\\r\\n          <head>\\r\\n            <meta charset=\\"UTF-8\\" />\\r\\n            <link rel=\\"icon\\" type=\\"image/svg+xml\\" href=\\"/vite.svg\\" />\\r\\n            <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1.0\\" />\\r\\n            <title>Vanilla Games</title>\\r\\n          </head>\\r\\n          <body>\\r\\n            <header></header>\\r\\n            <main></main>\\r\\n            <footer></footer>\\r\\n            <script type=\\"module\\" src=\\"/main.js\\"><\/script>\\r\\n          </body>\\r\\n        </html>\\r\\n```\\r\\n- Creamos la vista principal y los componentes header y footer con un \'template\' b\xe1sico\\r\\n```js title=\\"home.js\\"\\r\\n        export default {\\r\\n            template: `<h1>home</h1>`\\r\\n        }\\r\\n```\\r\\n        \\r\\n```js title=\\"header.js\\"\\r\\n        export const header = {\\r\\n            template: `header`\\r\\n        }\\r\\n```\\r\\n- En `**main.js**` importamos los componentes header y footer y los inyectamos en sus etiquetas correspondients. Tambi\xe9n cargamos la vista `home.js` en la etiqueta main\\r\\n```js title=\\"main.js\\"\\r\\nimport { header } from \'./componentes/header\'\\r\\nimport { footer } from \'./componentes/footer\'\\r\\n\\r\\n// Importamos la vista por defecto (que ser\xe1 home)\\r\\nasync function cargarVista () {\\r\\n  const componente = await import(\'./vistas/homeVista\')\\r\\n  const vista = componente.default\\r\\n  // Inyectamos la vista home\\r\\n  document.querySelector(\'main\').innerHTML = vista.template\\r\\n}\\r\\ncargarVista()\\r\\n\\r\\n//Inyectamos el componente header\\r\\ndocument.querySelector(\'header\').innerHTML = header.template\\r\\n\\r\\n//Inyectamos el componente footer\\r\\ndocument.querySelector(\'footer\').innerHTML = footer.template\\r\\n```\\r\\n- Con estos cambios la app ha dejado de funcionar. Eso es porque no encuentra el index.html y main.js en la raiz del proyecto. \\r\\n  \\r\\n  As\xed que vamos a configurar vite para que sepa d\xf3nde buscar los archivos index.html y main.js\\r\\n\\r\\n## 5. Configurando vite con el archivo `Vite.config.js`\\r\\nCreamos el archivo `vite.config.js` en la raiz del proyecto y copiamos el siguiente c\xf3digo (que puedes encontrar en el manual de vite). En los comentarios ver\xe1s que funci\xf3n tiene cada l\xednea aunque de momento no le des demasiada importancia.\\r\\n\\r\\n```js title=\\"vite.config.js\\"\\r\\nimport path from \'path\' // Para gestionar directorios\\r\\n\\r\\nexport default {\\r\\n  // Definimos la carpeta donde buscar cuando se carga la aplicaci\xf3n (donde estar\xe1 el main.js)\\r\\n  root: path.resolve(__dirname, \'src\'), \\r\\n  \\r\\n  build: {\\r\\n    rollupOptions: {\\r\\n        /*\\r\\n            Opciones de configuraci\xf3n de Rollup externas, ser\xe1n mergeadas con la configuracion\\r\\n            interna de Rollup de Vite.\\r\\n        */\\r\\n        input: {\\r\\n            main: path.resolve(__dirname, \'src/index.html\'), // Indicamos las p\xe1ginas que debe analizar\\r\\n        },\\r\\n        output: {\\r\\n            dir: path.resolve(__dirname, \'dist\'), //Donde se va a crear el build de nuestra aplicacion\\r\\n            format: \'es\', //Formato de ES modules\\r\\n        },\\r\\n    },\\r\\n    outDir: path.resolve(__dirname, \'dist\'),\\r\\n    minify: false, //( Si no se quiere minificar el build) https://vitejs.dev/config/#build-minify (aplica solo a los JS no CSS)\\r\\n},\\r\\n  server: {\\r\\n    /*port: 8080, */ // Podemos definir el puerto de salida\\r\\n    hot: true\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\nObserva que los componentes header y footer los exportamos con un nombre fijo `export const header = {}`, y `export const footer = {}`. Pero en el caso de homeVista usamos `export default {}` Esto lo hacemos para poder gestionar el cambio de p\xe1ginas de la aplicaci\xf3n. Mas adelante lo explicaremos con m\xe1s detalle.\\r\\n\\r\\n\xa1Ahora s\xed que podemos ver nuestra aplicaci\xf3n funcionando! \\r\\n\\r\\nEst\xe1 compuesta de tres componentes, el header.js que hemos inyectado en la etiqueta `<header>`, el footer.js que hemos inyectado en la etiqueta `<footer>` y el componente homeVista.js que hemos inyectado en la etiqueta `<main>`.\\r\\n\\r\\nA este \xfaltimo (homevista.js) le hemos a\xf1adido al final la palabra `vista`para indicar que representa una p\xe1gina web, en este caso la p\xe1gina Home.\\r\\n\\r\\n![home](/imagenes/v1/spa/home.png)\\r\\n\\r\\n\\r\\n## 4. Instalando Bootstrap, Bootswatch y SASS\\r\\n\\r\\nEn la construcci\xf3n de prototipos html hemos utilizado Bootstrap mediante el cdn. Es una manera sencilla y r\xe1pida, pero en los proyectos reales solemos descargar los archivos para no tener que depender de terceros.\\r\\n\\r\\nComo hemos visto anteriormente, Bootstrap funciona con SASS, por lo que necesitamos instalar y configurar nuestro proyecto para que convierte los archivos sass en css estandar.\\r\\n\\r\\n- Para instalar bootstrap y  bootswatch abre un terminal y ejecuta la siguiente linea de comandos:\\r\\n  ```\\r\\n  npm i bootstrap bootswatch @popperjs/core\\r\\n  ```\\r\\n  :::info\\r\\n  En lugar de escribir `install`escribimos `i`\\r\\n  :::\\r\\n- Instala ahora sass\\r\\n  ```\\r\\n  npm i sass -D\\r\\n  ```\\r\\n  :::info\\r\\n  Utilizamos -D para indicar que la dependencia instalada es de desarrollo, es decir, no la necesitaremos cuando despleguemos nuestra app en producci\xf3n\\r\\n  :::\\r\\n  \\r\\nSi la instalaci\xf3n se ha completado con \xe9xito podemos ver en el archivo package.json las dependencias instaladas:\\r\\n\\r\\n```json title=\\"package.json\\" {12,16,17,18}\\r\\n{\\r\\n  \\"name\\": \\"vanillagames10\\",\\r\\n  \\"private\\": true,\\r\\n  \\"version\\": \\"0.0.0\\",\\r\\n  \\"type\\": \\"module\\",\\r\\n  \\"scripts\\": {\\r\\n    \\"dev\\": \\"vite\\",\\r\\n    \\"build\\": \\"vite build\\",\\r\\n    \\"preview\\": \\"vite preview\\"\\r\\n  },\\r\\n  \\"devDependencies\\": {\\r\\n    \\"sass\\": \\"^1.66.1\\",\\r\\n    \\"vite\\": \\"^4.1.0\\"\\r\\n  },\\r\\n  \\"dependencies\\": {\\r\\n    \\"@popperjs/core\\": \\"^2.11.8\\",\\r\\n    \\"bootstrap\\": \\"^5.3.1\\",\\r\\n    \\"bootswatch\\": \\"^5.3.1\\"\\r\\n  }\\r\\n}\\r\\n\\r\\n```\\r\\n- Vamos a crear ahora la carpeta `src/scss` y dentro creamos el archivo `styles.scss `\\r\\n- Modificamos el archivo `vite.config.js` para que se procese **sass** a\xf1adiendo la siguiente linea:\\r\\n```js\\r\\nalias: {\\r\\n      \'~bootstrap\': path.resolve(__dirname, \'node_modules/bootstrap\'),\\r\\n      \'~bootswatch\': path.resolve(__dirname, \'node_modules/bootswatch\')\\r\\n    }\\r\\n```\\r\\nEl archivo vite.config.js quedar\xeda as\xed:\\r\\n```js  title=\\"vite.config.js\\"\\r\\nimport path from \'path\'\\r\\n\\r\\nexport default {\\r\\n  root: path.resolve(__dirname, \'src\'), // Carpeta donde alojamos el archivo main.js\\r\\n  resolve: {\\r\\n    alias: {\\r\\n      \'~bootstrap\': path.resolve(__dirname, \'node_modules/bootstrap\'),\\r\\n      \'~bootswatch\': path.resolve(__dirname, \'node_modules/bootswatch\'),\\r\\n    }\\r\\n  },\\r\\n  build: {\\r\\n    rollupOptions: {\\r\\n        /*\\r\\n            Opciones de configuraci\xf3n de Rollup externas, ser\xe1n mergeadas con la configuracion\\r\\n            interna de Rollup de Vite.\\r\\n        */\\r\\n        input: {\\r\\n            main: path.resolve(__dirname, \'src/index.html\'), // Indicamos las p\xe1ginas que debe analizar\\r\\n        },\\r\\n        output: {\\r\\n            dir: path.resolve(__dirname, \'dist\'), //Donde se va a crear el build de nuestra aplicacion\\r\\n            format: \'es\', //Formato de ES modules\\r\\n        },\\r\\n    },\\r\\n    outDir: path.resolve(__dirname, \'dist\'),\\r\\n    minify: false, //( Si no se quiere minificar el build) https://vitejs.dev/config/#build-minify (aplica solo a los JS no CSS)\\r\\n},\\r\\n  server: {\\r\\n    /*port: 8080,*/  // Podemos definir el puerto de salida\\r\\n    hot: true\\r\\n  }\\r\\n}\\r\\n```\\r\\n- En el archivo `styles.scss` cargamos la libreria bootstrap\\r\\n```js title=\\"styles.scss\\"\\r\\n// Import all of Bootstrap\'s CSS\\r\\n@import \\"~bootswatch/dist/yeti/variables\\";\\r\\n@import \\"~bootstrap/scss/bootstrap\\";\\r\\n@import \\"~bootswatch/dist/yeti/bootswatch\\";\\r\\n\\r\\n```\\r\\n- Finalmente importamos los estilos de scss\\r\\n\\r\\n```js title=\\"main.js\\"\\r\\n// Import all of Bootstrap\'s JS\\r\\nimport \'bootstrap\'\\r\\n\\r\\n// Import our custom CSS\\r\\nimport \'./scss/styles.scss\'\\r\\n\\r\\n```\\r\\n\\r\\n- Ejecutamos nuestro proyecto para verificar que todo est\xe1 ok mediante `npm run dev`. Deber\xedamos ver nuestra aplicaci\xf3n con las clases de **bootstrap** aplicandose y los estilos de **Bootswatch yeti**\\r\\n\\r\\n![yeti](/imagenes/v1/spa/yeti.png)\\r\\n\\r\\n- Continuamos configurando el archivo vite.config.js para que al generar las los archivos para desplegar en producci\xf3n (p\xe1ginas minificadas en la carpeta **dist**), las urls comiencen con `./` de manera que evitemos problemas al visualizar nuestra web cuando la subamos a un servidor como GitHub Pages. Para ello a\xf1adimos el c\xf3digo: \\r\\n```js\\r\\nbase: \'./\'\\r\\n```\\r\\n\\r\\nTambi\xe9n necesitamos decirle a vite que, cada vez que hagamos un build, se reescriba la carpeta dist. Para ello a\xf1adimos la siguiente opci\xf3n:\\r\\n```json\\r\\nbuild: {\\r\\n    emptyOutDir: true, // Esto vaciar\xe1 el directorio de salida antes de construir\\r\\n    ...\\r\\n}\\r\\n```\\r\\n\\r\\nNuestro archivo vite.config.js quedar\xeda as\xed:\\r\\n```js title=\\"vite.config.js\\"\\r\\nimport path from \'path\'\\r\\n\\r\\nexport default {\\r\\n  root: path.resolve(__dirname, \'src\'), // Carpeta donde alojamos el archivo main.js\\r\\n  base: \'./\',\\r\\n  resolve: {\\r\\n    alias: {\\r\\n      \'~bootstrap\': path.resolve(__dirname, \'node_modules/bootstrap\'),\\r\\n      \'~bootswatch\': path.resolve(__dirname, \'node_modules/bootswatch\'),\\r\\n    }\\r\\n  },\\r\\n  build: {\\r\\n    emptyOutDir: true, // Esto vaciar\xe1 el directorio de salida antes de construir\\r\\n    rollupOptions: {\\r\\n        /*\\r\\n            Opciones de configuraci\xf3n de Rollup externas, ser\xe1n mergeadas con la configuracion\\r\\n            interna de Rollup de Vite.\\r\\n        */\\r\\n        input: {\\r\\n            main: path.resolve(__dirname, \'src/index.html\'), // Indicamos las p\xe1ginas que debe analizar\\r\\n        },\\r\\n        output: {\\r\\n            dir: path.resolve(__dirname, \'dist\'), //Donde se va a crear el build de nuestra aplicacion\\r\\n            format: \'es\', //Formato de ES modules\\r\\n        },\\r\\n    },\\r\\n    outDir: path.resolve(__dirname, \'dist\'),\\r\\n    minify: false, //( Si no se quiere minificar el build) https://vitejs.dev/config/#build-minify (aplica solo a los JS no CSS)\\r\\n},\\r\\n  server: {\\r\\n    /*port: 8080,*/\\r\\n    hot: true\\r\\n  }\\r\\n}\\r\\n```\\r\\n## 6. Creando versi\xf3n de distribuci\xf3n\\r\\n\\r\\nVamos a crear la versi\xf3n de distribuci\xf3n de nuestra app. Esto crear\xe1 una carpeta **dist** con todos archivos html y css minificados. \\r\\n- Para ello, desde la terminal, ejecuta:\\r\\n  ```\\r\\n  npm run build\\r\\n  ```\\r\\n\\r\\n  Y efectivamente se ha creado una carpeta en la raiz del proyecto con los archivos necesarios. Esta es la carpeta que debemos subir a nuestro servidor de pruebas/producci\xf3n.\\r\\n\\r\\n- Prueba a abrir con live server el archivo index.html de la carpeta dist. Deber\xeda verse la aplicaci\xf3n funcionando correctamente.\\r\\n\\r\\n## 7. Instalando ESLint\\r\\n\\r\\n- Para utilizar en nuestro proyecto ESLint, en primer lugar instalaremos en **VSCode** el pluging **ESLint de Microsoft**.\\r\\n  \\r\\n  ![Eslint plugin](/imagenes/v1/spa/eslintplugin.png)\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n- Ahora instalamos **Eslint con la configuraci\xf3n standard**  \\r\\n  ```npm init @eslint/config -- --config semistandard\\r\\n  ```\\r\\n  Esto nos instalar\xe1 ESLint con la configuraci\xf3n Standard. Puedes comprobar que se ha creado un archivo de configuraci\xf3n con nombre `.eslintrc.cjs`\\r\\n\\r\\n- Finalmente vamos a configurar VSCode para que al grabar (pulsando ctrl + s) ESLint haga su trabajo, reparando, si puede, algunos errores de sintaxis y avisando (con una l\xednea subrayada roja) cuando puede haber un posible error en el c\xf3digo. \\r\\n  \\r\\n  \\r\\n- Para ello:\\r\\n  - Abre la paleta de comandos con `ctrl + shift + P` y escribe `settings json`\\r\\n  - Selecciona las preferencias de usuario: `Preferences: Open User Settings (JSON)`\\r\\n  - Asegurate de que tienes las siguiente linea en el archivo json\\r\\n    ```\\r\\n    \\"editor.codeActionsOnSave\\": {\\r\\n        \\"source.fixAll.eslint\\": true,\\r\\n    }\\r\\n    ```\\r\\n\\r\\n  Ahora, si abres un archivo y pulsas `ctrl + S` ver\xe1s como actua ESLint.\\r\\n\\r\\n## 8. Desplegando la aplicaci\xf3n en un servidor de pruebas (GitHub Pages)\\r\\nVamos a montarnos un sistema para poder hacer despliegue continuo. As\xed cada vez que actualicemos nuesta app, subiremos los cambios al repositorio y la publicaremos en el servidor de GitHub Pages.\\r\\n\\r\\n- Creamos un repositorio de git para el proyecto y lo sincronizamos con github (para ello utilizamos las herramientas de vscode)\\r\\n- Instalamos gh-pages con `npm i gh-pages -D`\\r\\n- Ahora creamos, en el package.json, el script **deploy** necesario para poder ejecturar el deploy a gh pages. \\r\\n\\r\\nEl archivo quedar\xeda as\xed: \\r\\n\\r\\n```json title=\\"package.json\\"\\r\\n{\\r\\n  \\"name\\": \\"trabajos_alumnos\\",\\r\\n  \\"private\\": true,\\r\\n  \\"version\\": \\"0.0.0\\",\\r\\n  \\"type\\": \\"module\\",\\r\\n  \\"scripts\\": {\\r\\n    \\"dev\\": \\"vite\\",\\r\\n    \\"build\\": \\"vite build --emptyOutDir\\",\\r\\n    \\"preview\\": \\"vite preview\\",\\r\\n    \\"deploy\\": \\"gh-pages -d dist\\"\\r\\n  },\\r\\n  \\"devDependencies\\": {\\r\\n    \\"gh-pages\\": \\"^5.0.0\\",\\r\\n    \\"sass\\": \\"^1.58.3\\",\\r\\n    \\"vite\\": \\"^4.1.0\\"\\r\\n  },\\r\\n  \\"dependencies\\": {\\r\\n    \\"@popperjs/core\\": \\"^2.11.6\\",\\r\\n    \\"bootstrap\\": \\"^5.2.3\\"\\r\\n  }\\r\\n}\\r\\n```\\r\\n- Ahora ya podemos ejecutar `npm run build` para contruir nuestra carpeta **dist** y a continuaci\xf3n `npm run deploy` para que se cree la rama gh-pages y se publique. Pru\xe9balo.\\r\\n- Finalmente, vamos a comprobar que se ha creado una **rama con nombre gh-pages** para el despliegue de nuestra app.\\r\\n  \\r\\n  ![rama github pages](/imagenes/v1/spa/ramagh.png)\\r\\n\\r\\n- Ahora solo falta configurar la rama gh-pages para que sea una p\xe1gina publica y muestre nuestra aplicaci\xf3n desplegada. Para ello entra en `Settings` (men\xfa superior) y `Pages` (men\xfa lateral izquierdo). A continuaci\xf3n selecciona la rama gh-pages y haz click en `save`\\r\\n\\r\\n:::note Nota\\r\\nPara poder publicar en GitHub Pages nuestro repositorio debe ser p\xfablico. Si no lo es, puedes cambiar su visibilidad desde `Settings` (La opci\xf3n est\xe1 al final de la p\xe1gina).\\r\\n:::\\r\\n\\r\\n  ![gh](/imagenes/v1/spa/ghpublic.png)\\r\\n\\r\\n  En breve aparecer\xe1 la url. (Ten paciencia que a veces tarda unos minutos. Ves haciendo F5 hasta que aparezca)\\r\\n\\r\\n  ![gh](/imagenes/v1/spa/ghpublic2.png)\\r\\n\\r\\n\xa1Y ya puedes visitar la p\xe1gina en el servidor!\\r\\n\\r\\n:::danger Commit!\\r\\nNo te olvides de subir al repositorio lo que llevamos hecho con un commit apropiado\\r\\n:::"},{"id":"/2023/11/20/Validaci\xf3n con Bootstrap","metadata":{"permalink":"/vanillaPill/blog/2023/11/20/Validaci\xf3n con Bootstrap","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-11-20-Validaci\xf3n con Bootstrap.md","source":"@site/blog/2023-11-20-Validaci\xf3n con Bootstrap.md","title":"Usando Bootstrap para la validaci\xf3n","description":"La mejor opci\xf3n para validar campos en un formulario html es utilizar las propiedades de html5 en los diferentes campos de los inputs.","date":"2023-11-20T00:00:00.000Z","formattedDate":"20 de noviembre de 2023","tags":[{"label":"Bootstrap 5","permalink":"/vanillaPill/blog/tags/bootstrap-5"},{"label":"html","permalink":"/vanillaPill/blog/tags/html"},{"label":"css","permalink":"/vanillaPill/blog/tags/css"},{"label":"validaciones","permalink":"/vanillaPill/blog/tags/validaciones"}],"readingTime":2.885,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Usando Bootstrap para la validaci\xf3n","tags":["Bootstrap 5","html","css","validaciones"],"sidebar_position":2},"prevItem":{"title":"Construyendo nuestra SPA","permalink":"/vanillaPill/blog/2023/11/21/Proyecto SPA con Vite y Bootstrap"},"nextItem":{"title":"Entorno de desarrollo II","permalink":"/vanillaPill/blog/Entorno de desarrollo II"}},"content":"La mejor opci\xf3n para validar campos en un formulario html es utilizar las propiedades de html5 en los diferentes campos de los inputs.\\r\\n\\r\\nNo obstante, no podemos asegurar como se va a mostrar la informaci\xf3n de validaci\xf3n en el navegador, ya que, dependiendo de cual utilicemos, se mostrar\xe1 de una u otra forma.\\r\\n\\r\\nPara evitar este inconveniente vamos a utilizar el sistema de validaci\xf3n de Bootstrap que, aunque no es perfecto (presenta algunos problemas de accesibilidad), mejorar\xe1 el aspecto y control de los mensajes cuando el navegador nos informe de errores.\\r\\n\\r\\n:::info Validaci\xf3n con Bootstrap\\r\\nPuedes aprender m\xe1s sobre la validaci\xf3n con Bootstrap aqu\xed:\\r\\n\\r\\n\ud83d\udc49 [https://getbootstrap.esdocu.com/docs/5.1/forms/validation/](https://getbootstrap.esdocu.com/docs/5.1/forms/validation/)\\r\\n\\r\\n:::\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n\\r\\n## \xbfC\xf3mo funciona? Formulario de inicio de sesi\xf3n\\r\\nPara mostrar como funciona vamos a utilizar el formulario de inicio de sesi\xf3n. Te muestro el c\xf3digo tal y como est\xe1 ahora:\\r\\n\\r\\n```html title=\\"form inicio sesi\xf3n\\"\\r\\n\\r\\n\x3c!-- 623451 --\x3e\\r\\n\\r\\n\x3c!-- Formulario de inicio de sesi\xf3n (login) --\x3e\\r\\n<form action=\\"\\" class=\\"form border shadow-sm p-3\\">\\r\\n  \x3c!-- Email --\x3e\\r\\n  <label for=\\"email\\" class=\\"form-label\\">Email:</label>\\r\\n  <input required type=\\"email\\" class=\\"form-control\\" />\\r\\n\\r\\n  \x3c!-- Contrase\xf1a --\x3e\\r\\n  <label for=\\"pass\\" class=\\"form-label mt-3\\">Contrase\xf1a:</label>\\r\\n  <input required minlength=\\"6\\" id=\\"pass\\" type=\\"password\\" class=\\"form-control\\" />\\r\\n\\r\\n  \x3c!-- Recordar contrase\xf1a --\x3e\\r\\n  <div class=\\"form-check mt-3\\">\\r\\n    <input\\r\\n      class=\\"form-check-input\\"\\r\\n      type=\\"checkbox\\"\\r\\n      value=\\"\\"\\r\\n      id=\\"flexCheckChecked\\"\\r\\n      checked\\r\\n    />\\r\\n    <label class=\\"form-check-label\\" for=\\"flexCheckChecked\\">\\r\\n      Recordar sesi\xf3n\\r\\n    </label>\\r\\n  </div>\\r\\n\\r\\n  \x3c!-- Link a recordar contrase\xf1a --\x3e\\r\\n  <a class=\\"d-block text-end\\" href=\\"#\\">\xbfHas olvidado tu contrase\xf1a?</a>\\r\\n\\r\\n  \x3c!-- Bot\xf3n Iniciar sesi\xf3n --\x3e\\r\\n  <input\\r\\n    type=\\"submit\\"\\r\\n    class=\\"btn btn-primary w-100 mt-3\\"\\r\\n    value=\\"Iniciar sesi\xf3n\\"\\r\\n  />\\r\\n</form>\\r\\n\\r\\n```\\r\\n\\r\\n1. En primer lugar necesitamos deshabilitar la validaci\xf3n de html5. Para ello a\xf1adiremos a la etiqueta `<form>` el atributo `novalidate`\\r\\n   \\r\\n   ```html\\r\\n   <form novalidate action=\\"\\" class=\\"form border shadow-sm p-3\\">\\r\\n   ```\\r\\n\\r\\n2. Vamos ahora a a\xf1adir los mensajes de error que se mostrar\xe1n cuando un campo no valide correctamente. En este formulario el email debe tener un formato correcto y la contrase\xf1a debe tener un m\xednimo de 6 caracteres, y l\xf3gicamente, los campos no pueden estar vac\xedos.\\r\\n   \\r\\n```html\\r\\n  \x3c!-- Email --\x3e\\r\\n  <label for=\\"email\\" class=\\"form-label\\">Email:</label>\\r\\n  <input required type=\\"email\\" class=\\"form-control\\" />\\r\\n  <div class=\\"invalid-feedback\\">\\r\\n    El formato del email no es correcto\\r\\n  </div>\\r\\n  \x3c!-- Contrase\xf1a --\x3e\\r\\n  <label for=\\"pass\\" class=\\"form-label mt-3\\">Contrase\xf1a:</label>\\r\\n  <input required minlength=\\"6\\" id=\\"pass\\" type=\\"password\\" class=\\"form-control\\" />\\r\\n  <div class=\\"invalid-feedback\\">\\r\\n      La contrase\xf1a debe tener como m\xednimo 6 caracteres\\r\\n  </div>\\r\\n\\r\\n```\\r\\n:::tip\\r\\nTambi\xe9n podemos a\xf1adir mensajes que se mostrar\xe1n **si el campo valida correctamente** usando la clase `valid-feedback`, pero nosotros no los vamos a necesitar.\\r\\n:::\\r\\n\\r\\nAhora lo que haremos, mediante javascript, ser\xe1: \\r\\n1. Capturar el formulario en una variable\\r\\n2. detectar cuando se intenta enviar el formulario (escuchando el evento submit)\\r\\n3. Comprobar si el formulario valida correctamente. Si no valida\\r\\n   1. Detenemos el evento submit para que no se intente enviar el formulario\\r\\n   2. Y a\xf1adimos la clase no validate al formulario. Esto har\xe1 que se muestren los mensajes de error.\\r\\n\\r\\nEste ser\xeda el c\xf3digo js resultante. Recuerda que debes incluirlo al final de la p\xe1gina, antes de de cerrar el body, mediante una etiqueta `<script>`\\r\\n\\r\\n:::danger \xa1Recuerda!\\r\\nNo te olvides del commit \ud83d\ude09\\r\\n:::\\r\\n\\r\\n```html title=\\"login.html\\"\\r\\n\x3c!-- Script para la validaci\xf3n del formulario --\x3e\\r\\n<script>\\r\\n  //Capturamos el formulario en una variable\\r\\n  const formulario = document.querySelector(\\"form\\")\\r\\n  //Detectamos su evento submit (enviar)\\r\\n  formulario.addEventListener(\\"submit\\", (event) => {\\r\\n    //Comprobamos si el formulario no valida \\r\\n    if (!formulario.checkValidity()) {\\r\\n      //Detenemos el evento enviar (submit)\\r\\n      event.preventDefault()\\r\\n      event.stopPropagation()\\r\\n    }\\r\\n    //Y a\xf1adimos la clase \'was-validate\' para que se muestren los mensajes\\r\\n    formulario.classList.add(\'was-validated\')\\r\\n  });\\r\\n<\/script>\\r\\n```\\r\\nAqu\xed puedes ver como se mostrar\xeda un error de validaci\xf3n usando este m\xe9todo:\\r\\n\\r\\n![](/imagenes/v1/validaciones/validacionChromeError.png)\\r\\n\\r\\nAhora solo nos faltar\xeda aplicar este m\xedsmo m\xe9todo a todos los formularios de nuestros prototipos html \ud83d\ude05. \xa1Adelante!"},{"id":"/Entorno de desarrollo II","metadata":{"permalink":"/vanillaPill/blog/Entorno de desarrollo II","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/Entorno de desarrollo II.md","source":"@site/blog/Entorno de desarrollo II.md","title":"Entorno de desarrollo II","description":"Hablemos de NodeJS","date":"2023-08-21T20:04:51.000Z","formattedDate":"21 de agosto de 2023","tags":[],"readingTime":24.17,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"Usando Bootstrap para la validaci\xf3n","permalink":"/vanillaPill/blog/2023/11/20/Validaci\xf3n con Bootstrap"},"nextItem":{"title":"Buenas pr\xe1cticas creando mensajes \'commit\'","permalink":"/vanillaPill/blog/commit"}},"content":"## Hablemos de NodeJS\\r\\n\\r\\n<div style={{width: 200, margin: \'0 auto 0 auto\'}}>\\r\\n\\r\\n  ![npm](/imagenes/v1/spa/nodejs.png)\\r\\n\\r\\n</div>\\r\\n\\r\\nNode.js es una plataforma de programaci\xf3n que nos va a permitir crear aplicaciones y sitios web usando el lenguaje de programaci\xf3n JavaScript. \\r\\n\\r\\nA diferencia de JavaScript que **normalmente se ejecuta en navegadores** web, Node.js **permite que JavaScript tambi\xe9n se ejecute en servidores**, lo que lo hace \xfatil para crear aplicaciones web de alto rendimiento y aplicaciones de red. \\r\\n\\r\\nOsea, que si antiguamente usabamos javascript ejecut\xe1ndolo en el navegador (para realizar tareas como validaci\xf3n, mejorar la interactividad, etc) y php ejecut\xe1ndolo en el servidor (para hacer consultas a bases de datos, gestionar archivos, etc.) ahora... \xa1tachan! ... Podemos utilizar javascript tanto en el lado del cliente como en el lado del servidor, sustituyendo a otros lenguajes como php, python, java, etc. **\xa1Javascript para todo! \ud83d\ude0e**.\\r\\n\\r\\nNosotros no lo usaremos en el lado del servidor (aunque molar\xeda mucho) porque ya estamos usando un servicio como back-end. Nuestro amado Supabase.\\r\\n\\r\\n:::info Node.js\\r\\n**Node.js** fue creado por Ryan Dahl y su desarrollo comenz\xf3 en 2009. Dahl present\xf3 Node.js como un entorno de tiempo de ejecuci\xf3n (runtime) en la conferencia JSConf en 2009. \\r\\n\\r\\nLa plataforma se basa en el motor de JavaScript V8 de Google, que tambi\xe9n se utiliza en el navegador Google Chrome. \\r\\n\\r\\nNode.js se ha convertido en una tecnolog\xeda muy influyente en el mundo del desarrollo web y ha ganado popularidad debido a su capacidad para construir aplicaciones web en tiempo real y escalables utilizando JavaScript tanto en el lado del servidor como en el cliente.\\r\\n\\r\\n<details>\\r\\n<summary>Te explico algunas de las ventajas de usar Node.js con m\xe1s detalle:</summary>\\r\\n\\r\\n- **Uso compartido de c\xf3digo**: Node.js permite a los desarrolladores utilizar JavaScript tanto en el lado del cliente como en el del servidor. Esto facilita el uso compartido de c\xf3digo y la l\xf3gica entre el frontend y el backend, lo que puede simplificar el desarrollo y reducir la duplicaci\xf3n de esfuerzos.\\r\\n\\r\\n- **Empaquetado y construcci\xf3n eficiente**: Herramientas como npm (Node Package Manager) permiten gestionar f\xe1cilmente dependencias y paquetes para proyectos frontend. Adem\xe1s, Node.js es utilizado com\xfanmente con herramientas como Webpack y Gulp para empaquetar, minificar y compilar el c\xf3digo frontend, lo que facilita la gesti\xf3n de assets y optimiza el rendimiento.\\r\\n\\r\\n- **Desarrollo asincr\xf3nico**: Node.js est\xe1 dise\xf1ado para operaciones asincr\xf3nicas y no bloqueantes. Esta caracter\xedstica encaja bien con las aplicaciones frontend, donde a menudo se manejan solicitudes de red y operaciones que pueden bloquear el flujo en un entorno s\xedncrono.\\r\\n\\r\\n- **Herramientas y entornos de desarrollo**: Node.js ofrece una amplia gama de herramientas y m\xf3dulos que son \xfatiles para el desarrollo frontend, como navegadores basados en Node.js (por ejemplo, Puppeteer para automatizar tareas de navegaci\xf3n), m\xf3dulos para interactuar con APIs y librer\xedas de manipulaci\xf3n de archivos.\\r\\n\\r\\n- **Servidores de desarrollo r\xe1pidos**: Node.js puede ser utilizado para crear servidores de desarrollo r\xe1pidos y ligeros para proyectos frontend, lo que facilita la visualizaci\xf3n y prueba de las aplicaciones en local antes de implementarlas en producci\xf3n.\\r\\n\\r\\n- **Herramientas para automatizaci\xf3n**: Node.js se integra bien con herramientas de automatizaci\xf3n de tareas, como la ejecuci\xf3n de pruebas unitarias, pruebas de rendimiento y tareas de construcci\xf3n, lo que puede mejorar la eficiencia y calidad del desarrollo frontend.\\r\\n\\r\\n- **Integraci\xf3n con frameworks frontend**: Algunos frameworks frontend, como React y Angular, utilizan herramientas y bibliotecas que son amigables con Node.js. Esto permite una integraci\xf3n m\xe1s fluida entre el backend y el frontend en proyectos donde se utilizan estos frameworks.\\r\\n\\r\\n- **Comunidad activa y recursos disponibles**: La comunidad de Node.js es grande y activa, lo que significa que hay una gran cantidad de recursos, tutoriales y bibliotecas disponibles para abordar diferentes aspectos del desarrollo frontend utilizando Node.js.\\r\\n\\r\\n</details>\\r\\n:::\\r\\n\\r\\n\\r\\nEn resumen, \xa1Node.js mola mucho! Nos va a facilitar mucho el desarrollo frontend al permitir la utilizaci\xf3n de JavaScript en ambos lados, cliente y servidor. Adem\xe1s:\\r\\n- Nos va a facilitar el **manejo de dependencias** (por ejemplo con ***npm***) \\r\\n- Nos va a brindar **herramientas de automatizaci\xf3n en la creaci\xf3n de proyectos** (por ejemplo con **vite**)\\r\\n- Y proporcionar una **integraci\xf3n fluida con frameworks y bibliotecas frontend populares** (como podr\xedan ser React, Vue, etc.).\\r\\n\\r\\n## Hablemos de \'npm\'\\r\\n\\r\\n<div style={{width: 200, margin: \'0 auto 0 auto\'}}>\\r\\n\\r\\n  ![npm](/imagenes/v1/spa/npm.png)\\r\\n\\r\\n</div>\\r\\n\\r\\nComo te iba diciendo, necesitamos **instalar en nuestro ordenador** **Node.js** para poder empezar a crear aplicaciones web basadas en javascript.\\r\\n\\r\\nA la vez que instalamos Nodejs, se nos va a instalar **npm**, que es un gestor de paquetes que nos va a ir de perlas, ya lo ver\xe1s.\\r\\n\\r\\n:::info \xbfQu\xe9 es npm?\\r\\nNPM (Node Package Manager) es una herramienta que se utiliza en el entorno de Node.js para gestionar las bibliotecas y paquetes de c\xf3digo reutilizable que los desarrolladores utilizan en sus proyectos. En t\xe9rminos m\xe1s simples, podr\xedas pensar en NPM como una especie de \\"tienda\\" en l\xednea donde puedes encontrar y descargar piezas de c\xf3digo que hacen tareas espec\xedficas.\\r\\n<details>\\r\\n<summary>Algunos ejemplos de lo que puedes hacer con NPM:\\r\\n\\r\\n</summary>\\r\\nCuando los desarrolladores crean c\xf3digo \xfatil, a menudo lo empaquetan en lo que se llama un \\"paquete\\". Estos paquetes pueden contener funciones, clases y otras partes de c\xf3digo que se pueden utilizar en diferentes proyectos. \\r\\n\\r\\nNPM hace que sea f\xe1cil para los desarrolladores compartir sus paquetes y para otros desarrolladores instalarlos y usarlos en sus propios proyectos.\\r\\n\\r\\nAlgunos ejemplos de lo que puedes hacer con NPM incluyen:\\r\\n\\r\\n**Instalar paquetes**: Puedes utilizar NPM para buscar y descargar paquetes espec\xedficos que necesitas para tu proyecto. Por ejemplo, si necesitas una librer\xeda para trabajar con fechas, puedes usar NPM para instalarla.\\r\\n\\r\\n**Gestionar dependencias**: Cuando tu proyecto utiliza m\xfaltiples paquetes, es probable que algunos dependan de otros. NPM ayuda a gestionar estas dependencias, asegurando que las versiones correctas est\xe9n instaladas y funcionen juntas sin conflictos.\\r\\n\\r\\n**Actualizar paquetes**: A medida que los desarrolladores mejoran y actualizan sus paquetes, puedes usar NPM para actualizarlos en tu proyecto y obtener las \xfaltimas mejoras y correcciones de errores.\\r\\n\\r\\n**Compartir c\xf3digo**: Si creas algo \xfatil, puedes empaquetarlo y publicarlo en el registro de NPM para que otros desarrolladores lo utilicen. Esto promueve la colaboraci\xf3n y la reutilizaci\xf3n de c\xf3digo.\\r\\n</details>\\r\\n\\r\\n:::\\r\\n\\r\\n## Hablemos de Vite\\r\\n<div style={{width: 200, margin: \'0 auto 0 auto\'}}>\\r\\n  <img src=\\"https://vitejs.dev/logo-with-shadow.png\\" />\\r\\n</div>\\r\\n\\r\\n**Y finalmente instalaremos Vite**. \\r\\n\\r\\n\xa1Vite es una pasada! Con el podremos montar un proyecto en muy pocos segundos: nos crear\xe1 el scaffolding (las carpetas de nuestra app), traducir\xe1 nuestro scss a css normal y el javascript m\xe1s moderno a una versi\xf3n que todos los navegadores entiendan, y muchas cosas m\xe1s. Es una herramienta fant\xe1stica.\\r\\n\\r\\n\\r\\n:::info \xbfQu\xe9 es Vite?\\r\\n\\r\\n**Vite** es un entorno de desarrollo para construir aplicaciones web r\xe1pidas. \\r\\n\\r\\nSe enfoca en acelerar el proceso de desarrollo al recargar r\xe1pidamente los cambios y al aprovechar el sistema de m\xf3dulos nativos de JavaScript. \\r\\n\\r\\nTambi\xe9n es amigable con diferentes lenguajes y formatos, lo que facilita la creaci\xf3n de aplicaciones web modernas y eficientes.\\r\\n\\r\\n<details>\\r\\n<summary>Algunas caracter\xedsticas clave de Vite incluyen:</summary>\\r\\n\\r\\n\\r\\n**Desarrollo r\xe1pido en tiempo real**: Vite utiliza un servidor de desarrollo en tiempo real que permite recargar r\xe1pidamente el navegador cuando se realizan cambios en el c\xf3digo. Esto acelera el proceso de iteraci\xf3n y facilita la visualizaci\xf3n de los cambios inmediatamente.\\r\\n\\r\\n**Carga de m\xf3dulos nativos**: Vite aprovecha el sistema nativo de m\xf3dulos de JavaScript (ECMAScript Modules) para cargar los m\xf3dulos de manera m\xe1s eficiente. Esto mejora el rendimiento y reduce la necesidad de empaquetar y transpilar c\xf3digo durante el desarrollo.\\r\\n\\r\\n**Desarrollo basado en ES modules**: Vite fomenta el uso de ECMAScript Modules, lo que permite importar m\xf3dulos de manera m\xe1s directa y clara, y reduce la necesidad de configuraciones complicadas de bundling (empaquetado).\\r\\n\\r\\n**Soporte para m\xfaltiples lenguajes y formatos**: Vite admite no solo JavaScript, sino tambi\xe9n TypeScript, CSS, SASS, Less y otros lenguajes y formatos de manera nativa, lo que simplifica el proceso de desarrollo cuando se utilizan m\xfaltiples tecnolog\xedas.\\r\\n\\r\\n**Optimizaci\xf3n para producci\xf3n**: Aunque Vite est\xe1 dise\xf1ado principalmente para el desarrollo, tambi\xe9n ofrece opciones para crear una versi\xf3n optimizada y lista para producci\xf3n de la aplicaci\xf3n, incluida la generaci\xf3n de archivos est\xe1ticos y la optimizaci\xf3n de recursos.\\r\\n\\r\\n**Extensibilidad**: Vite es modular y extensible, lo que significa que los desarrolladores pueden personalizar su flujo de trabajo agregando plugins y ajustando la configuraci\xf3n seg\xfan sea necesario.\\r\\n</details>\\r\\n\\r\\n:::\\r\\n\\r\\n## Hablemos de GitHub Pages\\r\\n\\r\\n<div style={{width: 200, margin: \'0 auto 0 auto\'}}>\\r\\n\\r\\n  ![npm](/imagenes/v1/spa/githubpages.png)\\r\\n\\r\\n</div>\\r\\n\\r\\nSi recuerdas ( y si no... vayan a repasar \ud83d\udc49[Entorno de desarrollo](#)), justo antes de empezar a maquetar los prototipos con html, estuvimos preparando nuestro entorno de desarrollo (la versi\xf3n b\xe1sica).\\r\\n\\r\\nEstuvimos instalando VSCode, configur\xe1ndolo con plugins como Prettier, etc. Pero tambi\xe9n instalamos Git y lo conectamos con GitHub, que como recordar\xe1s, es un repositorio en la nube.\\r\\n\\r\\nPues bien, GitHub tiene tambien una funcionalidad que nos va a ir a las mil maravillas: **GitHub Pages**.\\r\\n\\r\\nCon GitHub Pages tendremos un **servidor de pruebas** para que podamos ir desplegando nuestra aplicaci\xf3n y ver como funciona tal y como lo har\xeda **una vez desplegada en producci\xf3n**. \\r\\n\\r\\n\\r\\n:::info\\r\\n\\r\\n**GitHub Pages** es un servicio ofrecido por GitHub que permite a los usuarios **alojar sitios web est\xe1ticos** directamente desde sus repositorios de GitHub. En otras palabras, te permite convertir tu repositorio de GitHub en un sitio web p\xfablico que cualquiera puede visitar en l\xednea.\\r\\n\\r\\n<details>\\r\\n<summary>Aqu\xed hay algunas caracter\xedsticas clave de GitHub Pages:\\r\\n</summary>\\r\\n\\r\\nAlojamiento de sitios web est\xe1ticos: GitHub Pages es ideal para alojar sitios web est\xe1ticos, que consisten en archivos HTML, CSS, JavaScript, im\xe1genes y otros recursos que no requieren procesamiento en el servidor.\\r\\n\\r\\nF\xe1cil configuraci\xf3n: Configurar un sitio web en GitHub Pages es relativamente sencillo. Puedes crear una rama especial llamada \\"gh-pages\\" en tu repositorio y colocar tus archivos HTML y otros recursos en esa rama. Alternativamente, puedes utilizar la rama \\"main\\" o \\"master\\" como la fuente de tu sitio.\\r\\n\\r\\nPersonalizaci\xf3n del dominio: Puedes personalizar el dominio de tu sitio web en GitHub Pages, lo que significa que puedes tener una direcci\xf3n web personalizada en lugar de la URL predeterminada proporcionada por GitHub.\\r\\n\\r\\nSoporte para Jekyll: Jekyll es un generador de sitios est\xe1ticos que est\xe1 integrado con GitHub Pages. Te permite crear sitios web atractivos utilizando plantillas y contenido almacenado en tus repositorios de GitHub.\\r\\n\\r\\nGratuito para repositorios p\xfablicos: GitHub Pages es gratuito para repositorios p\xfablicos, lo que significa que puedes crear y alojar sitios web p\xfablicos sin costo adicional. Sin embargo, si deseas mantener tu repositorio privado y usar GitHub Pages, es posible que necesites una suscripci\xf3n de pago.\\r\\n\\r\\nDocumentaci\xf3n y proyectos personales: Muchos desarrolladores utilizan GitHub Pages para alojar documentaci\xf3n de proyectos, blogs personales, portafolios y otros tipos de contenido est\xe1tico.\\r\\n</details>\\r\\n\\r\\n:::\\r\\n\\r\\n## Y finalmente, hablemos de ESLint\\r\\n\\r\\n<div style={{width: 200, margin: \'0 auto 0 auto\'}}>\\r\\n\\r\\n  ![npm](/imagenes/v1/spa/eslint.png)\\r\\n\\r\\n</div>\\r\\n\\r\\nPara el dise\xf1o de los prototipos html nos hemos ayudado de **Prettier**, un plugin de VSCode que nos ayuda a dar formato al codigo html y css, pero para javascript tenemos una herramienta mucho m\xe1s potente llamada **EsLint**.\\r\\n\\r\\nA la hora de escribir nuestro c\xf3digo es importante mantener las formas, utilizando estructuras correctas y manteniendo ciertas pautas. Por ejemplo: \\r\\n- \xbfDebo poner punto y coma al final de cada linea? \\r\\n- \xbfPuedo declarar variables y luego no usarlas? \\r\\n- \xbfPuedo dejar espacios entra lineas de c\xf3digo? \\r\\n- \xbfCuantos espacios debo poner al tabular?\\r\\n\\r\\nUna vez tengo claras todas estas reglas, puedo utilizar un **Linter** para que se encargue de vigilar que las estoy cumpliendo que nuestro c\xf3digo es **consistente**. \\r\\n\\r\\nCon esto vamos a evitar malas pr\xe1cticas escribiendo el c\xf3digo y podremos detectar errores de sintaxis antes de ejecutar nuestros scripts.\\r\\n\\r\\n**Existen algunos estandar**s a la hora de escribir c\xf3digo que tienen sus propias reglas. Por ejemplo:\\r\\n- Airbnb\\r\\n- StandardJS\\r\\n- Google\\r\\n- XO\\r\\nNosotros nos basaremos en el estandard **StandardJS**.\\r\\n\\r\\n\\r\\n:::info \xbfQu\xe9 es un linter?\\r\\n\\r\\nUn linter es una herramienta de programaci\xf3n que **analiza el c\xf3digo fuente de un programa en busca de errores**, inconsistencias y patrones de c\xf3digo que no siguen las convenciones y mejores pr\xe1cticas de programaci\xf3n. \\r\\n\\r\\nLos linters modernos son herramientas que ayudan a los desarrolladores a escribir un **c\xf3digo m\xe1s limpio, legible y coherente**. \\r\\n\\r\\n<details>\\r\\n<summary>\\r\\nAlgunos de los aspectos que un linter puede verificar incluyen:\\r\\n</summary>\\r\\n\\r\\n**Errores de sintaxis**: Identificar errores de sintaxis que podr\xedan causar que el programa no funcione correctamente.\\r\\n\\r\\n**Convenciones de estilo**: Encontrar discrepancias en la forma en que el c\xf3digo est\xe1 formateado y escrito, como indentaci\xf3n, uso de comillas, espaciado, etc.\\r\\n**Mejores pr\xe1cticas**: Advertir sobre patrones de c\xf3digo que podr\xedan ser ineficientes o propensos a errores.\\r\\n\\r\\n**Compatibilidad con est\xe1ndares**: Verificar si el c\xf3digo sigue las convenciones y est\xe1ndares de programaci\xf3n establecidos por la comunidad o el equipo de desarrollo.\\r\\n\\r\\n**Errores l\xf3gicos**: Detectar posibles errores l\xf3gicos, como variables no utilizadas o condicionales que siempre se eval\xfaan de la misma manera.\\r\\n\\r\\n**Seguridad**: Advertir sobre posibles problemas de seguridad, como el uso de funciones potencialmente peligrosas.\\r\\n\\r\\n**Documentaci\xf3n**: Identificar la falta de comentarios o documentaci\xf3n en el c\xf3digo.\\r\\n\\r\\nLos linters se pueden configurar para funcionar con diferentes lenguajes de programaci\xf3n y se integran con los flujos de trabajo de desarrollo. Pueden ejecutarse autom\xe1ticamente en el momento de la compilaci\xf3n, en un entorno de desarrollo integrado (IDE) o a trav\xe9s de la l\xednea de comandos. Algunos linters populares incluyen **ESLint para JavaScript**, Pylint para Python y RuboCop para Ruby.\\r\\n\\r\\n</details>\\r\\n\\r\\n:::\\r\\n\\r\\n## ESlint como linter predeterminado\\r\\nEn nuestro caso usaremos una libreria llamada **ESLint** como linter para que vigile el c\xf3digo de nuestros proyectos, que configuraremos para que se ajuste al StandardJS.\\r\\n\\r\\nNosotros usaremos el linter que m\xe1s exito ha tenido en la programaci\xf3n con javascript: **ESLint**.\\r\\n\\r\\n\\r\\n\\r\\nVale, ahora ya nos suena qu\xe9 es cada cosa y para que sirve, es hora de actualizar nuestro entorno de trabajo. Despu\xe9s crearemos nuestro proyecto basado en **NodeJs** con la herramienta **Vite** e instalaremos las **dependencias** necesarias con **npm**, como puede ser **ESLint**, para mejorar nuestro flujo de trabajo en el desarrollo de nuestra **SPA**.\\r\\n\\r\\n\xbfEstas preparado?\\r\\n\\r\\n\\r\\n## Esto es lo que vamos a hacer:\\r\\n\\r\\n1. Instalaremos **Node.js** que a su vez instalar\xe1 **npm**\\r\\n2. Crearemos un **proyecto html/javascript** utilizando vite dentro de nuestra carpeta de proyecto\\r\\n3. Analizaremos el proyecto ejemplo para comprender la estructura de archivos que incluye una spa.\\r\\n4. Modificaremos el **scaffolding** (las carpetas y archivos) de nuestro proyecto con algunos \'componentes\' b\xe1sicos.\\r\\n5. Crearemos el archivo **vite.config** y verificamos que todo funciona de forma correcta\\r\\n6. Instalaremos Bootstrap y Bootswach\\r\\n7. Instalaremos ESLint\\r\\n8. Crearemos un sistema de despliegue continuo basado en GitHub Pages utilizando la dependencia **gh-pages**.\\r\\n\\r\\n### 1. Instalando Node.js\\r\\n\\r\\nEste apartado no tiene misterio. Te vas a la [web de Node.js](https://nodejs.org/es) y  descargas el paquete correspondiente a tu sistema operativo y lo instalas. (Ya sabes: continuar, continuar, continuar...)\\r\\n\\r\\n:::tip \\r\\nPuede que ya tengas instalado nodejs. Si quieres comprobarlo y saber la versi\xf3n que hay instalada: \\r\\n1. Abre un terminal \\r\\n2. Escribe ```node -v``` .Te aparecer\xe1 la versi\xf3n actual de Nodejs.\\r\\n\\r\\nSi la versi\xf3n que tienes no est\xe1 actualizada, entonces descarga el instalador de la web oficial y ejecutalo para actualizar Nodejs.\\r\\n:::\\r\\n\\r\\n\\r\\n### 2. Construyendo una app con vite\\r\\n- En primer lugar debemos asegurarnos de cambiar a la rama `main`. Veremos que en la raiz de nuestro proyecto solo tenemos el archivo *readme.md*\\r\\n- Abrimos un terminal en el propio VSCode (`ctrl+mayus+\xf1`) para crear nuestro proyecto. Ejecuta la siguiente linea de c\xf3digo. \\r\\n  :::note No olvides el punto\\r\\n  El punto significa que debe crearse el proyecto en la misma carpeta que est\xe1s ahora mismo, es decir, en vanillagames10\\r\\n  :::\\r\\n\\r\\n  ```\\r\\n  npm create vite .\\r\\n  ```\\r\\n- Te preguntar\xe1 si quieres borrar los archivos que hay en la carpeta. Dile que s\xed, porque lo \xfanico que tenemos es el readme.md que ya ver\xe1s que nos va a respetar.\\r\\n- Indicaremos que queremos un proyecto basado en **Vanilla** javascript (es decir, javascript puro)\\r\\n- Indicaremos que usamos **javascript** (no queremos typescript)\\r\\n- En este momento nos habr\xe1 creado los archivos y las carpetas b\xe1sicas para una app. Solo nos falta instalar las dependencias. Para ello usamos npm desde el terminal:\\r\\n  ```\\r\\n  npm install\\r\\n  ```\\r\\n  F\xedjate que ahora se ha creado una carpeta nueva llamada node_modules. Aqu\xed est\xe1n instaladas todas las librerias que vamos a necesitar. (De momento, esa carpeta mejor no tocarla \ud83d\ude05)\\r\\n- Para acabar vamos a levantar un servidor de pruebas. Si abrimos esta url en un navegador podremos ver como va quedando nuestro proyecto. De momento veremos la plantilla b\xe1sica que nos ofrece vite.\\r\\n  ```\\r\\n  npm run dev\\r\\n  ```\\r\\n\\r\\n  ```\\r\\n  VITE v4.4.9  ready in 199 ms\\r\\n\\r\\n  \u279c  Local:   http://localhost:5173/\\r\\n  \u279c  Network: use --host to expose\\r\\n  \u279c  press h to show help\\r\\n  ```\\r\\n![localhost](/imagenes/v1/spa/localhost.png)\\r\\n\\r\\n:::danger Commit\\r\\n\xbfQue tal un commit antes de seguir?   Podr\xeda ser algo as\xed: \\r\\n\\r\\n  \\"*Crea proyecto con vite*\\"\\r\\n\\r\\n(Por cierto, aseg\xfarate de estar en la **rama main**.)\\r\\n\\r\\n:::\\r\\n\\r\\n### 3. Analizando el proyecto de ejemplo\\r\\nVeamos los archivos y carpetas que nos ha creado vite:\\r\\n\\r\\n![Scaffolding](/imagenes/v1/spa/scaffolding.png)\\r\\n\\r\\nLos archivos m\xe1s importante son el `index.html` y `main.js`\\r\\n\\r\\n```html title=\\"index.html\\"\\r\\n<!DOCTYPE html>\\r\\n<html lang=\\"en\\">\\r\\n  <head>\\r\\n    <meta charset=\\"UTF-8\\" />\\r\\n    <link rel=\\"icon\\" type=\\"image/svg+xml\\" href=\\"/vite.svg\\" />\\r\\n    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1.0\\" />\\r\\n    <title>Vite App</title>\\r\\n  </head>\\r\\n  <body>\\r\\n    <div id=\\"app\\"></div>\\r\\n    <script type=\\"module\\" src=\\"/main.js\\"><\/script>\\r\\n  </body>\\r\\n</html>\\r\\n\\r\\n```\\r\\n\\r\\n\\r\\n\\r\\nLo que tenemos aqu\xed es un index.html que se cargar\xe1 en el navegador. Este tiene un div con id=\\"app\\". En este div es donde se inyecta toda la aplicaci\xf3n. **\xa1Y no tenemos nada m\xe1s!** El resto de los componentes se ir\xe1n contruyendo desde javascript.\\r\\n\\r\\nEste es el archivo main.js que cargamos desde index.html:\\r\\n\\r\\n```javascript title=\\"main.js\\"\\r\\nimport \'./style.css\'\\r\\nimport javascriptLogo from \'./javascript.svg\'\\r\\nimport { setupCounter } from \'./counter.js\'\\r\\n\\r\\ndocument.querySelector(\'#app\').innerHTML = `\\r\\n  <div>\\r\\n    <a href=\\"https://vitejs.dev\\" target=\\"_blank\\">\\r\\n      <img src=\\"/vite.svg\\" class=\\"logo\\" alt=\\"Vite logo\\" />\\r\\n    </a>\\r\\n    <a href=\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript\\" target=\\"_blank\\">\\r\\n      <img src=\\"${javascriptLogo}\\" class=\\"logo vanilla\\" alt=\\"JavaScript logo\\" />\\r\\n    </a>\\r\\n    <h1>Hello Vite!</h1>\\r\\n    <div class=\\"card\\">\\r\\n      <button id=\\"counter\\" type=\\"button\\"></button>\\r\\n    </div>\\r\\n    <p class=\\"read-the-docs\\">\\r\\n      Click on the Vite logo to learn more\\r\\n    </p>\\r\\n  </div>\\r\\n`\\r\\n\\r\\nsetupCounter(document.querySelector(\'#counter\'))\\r\\n\\r\\n```\\r\\n\\r\\nEn el main.js podemos ver como inicialmente cargamos tres archivos, el style.css, un archivo .svg (una imagen) y el archivo counter.js, el cual tiene el c\xf3digo correspondiente al contador que hemos visto en la p\xe1gina principal. \\r\\n\\r\\nA continuacion, haciendo uso de `innerHTML` inyectamos en el div \'app\' un fragmento de c\xf3digo html (un div que incluye unos enlaces, un bot\xf3n, una imagen, etc.). \\r\\n\\r\\nEs decir, **estamos construyendo la p\xe1gina desde el archivo main.js**\\r\\n\\r\\nAhora que vemos de qu\xe9 va esto, vamos a contruir nuestra propia estructura para el proyecto que estamos desarrollando.\\r\\n\\r\\n### 4. Modificando nuestro Scaffolding\\r\\nHemos visto que todo funciona bien. De momento... Porque ahora vamos a contruir la estructura de archivos con una vista principal y algunos objetos a modo de componentes.\\r\\n\\r\\nHagamos lo siguiente:\\r\\n- Eliminamos los archivos counter.js, index.html, main.js y style.css y creamos una estructura de carpetas como esta:\\r\\n```\\r\\n        node_modules  \\r\\n        src\\r\\n            componentes\\r\\n                header.js\\r\\n                footer.js\\r\\n            vistas\\r\\n                homeVista.js\\r\\n            index.html \\r\\n            main.js\\r\\n        .gitignore  \\r\\n        package.json  \\r\\n        package-lock.json  \\r\\n```\\r\\n\\r\\n- Modificamos `index.html` para que solo tenga las etiquetas header, main y footer y enlazamos el archivo main.js\\r\\n```html title=\\"index.html\\"\\r\\n        <!DOCTYPE html>\\r\\n        <html lang=\\"es\\">\\r\\n          <head>\\r\\n            <meta charset=\\"UTF-8\\" />\\r\\n            <link rel=\\"icon\\" type=\\"image/svg+xml\\" href=\\"/vite.svg\\" />\\r\\n            <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1.0\\" />\\r\\n            <title>Vanilla Games</title>\\r\\n          </head>\\r\\n          <body>\\r\\n            <header></header>\\r\\n            <main></main>\\r\\n            <footer></footer>\\r\\n            <script type=\\"module\\" src=\\"/main.js\\"><\/script>\\r\\n          </body>\\r\\n        </html>\\r\\n```\\r\\n- Creamos la vista principal y los componentes header y footer con un \'template\' b\xe1sico\\r\\n```js title=\\"home.js\\"\\r\\n        export default {\\r\\n            template: `<h1>home</h1>`\\r\\n        }\\r\\n```\\r\\n        \\r\\n```js title=\\"header.js\\"\\r\\n        export const header = {\\r\\n            template: `header`\\r\\n        }\\r\\n```\\r\\n- En `**main.js**` importamos los componentes header y footer y los inyectamos en sus etiquetas correspondients. Tambi\xe9n cargamos la vista `home.js` en la etiqueta main\\r\\n```js title=\\"main.js\\"\\r\\nimport { header } from \'./componentes/header\'\\r\\nimport { footer } from \'./componentes/footer\'\\r\\n\\r\\n// Importamos la vista por defecto (que ser\xe1 home)\\r\\nasync function cargarVista () {\\r\\n  const componente = await import(\'./vistas/homeVista\')\\r\\n  const vista = componente.default\\r\\n  // Inyectamos la vista home\\r\\n  document.querySelector(\'main\').innerHTML = vista.template\\r\\n}\\r\\ncargarVista()\\r\\n\\r\\n//Inyectamos el componente header\\r\\ndocument.querySelector(\'header\').innerHTML = header.template\\r\\n\\r\\n//Inyectamos el componente footer\\r\\ndocument.querySelector(\'footer\').innerHTML = footer.template\\r\\n```\\r\\n- Con estos cambios la app ha dejado de funcionar. Eso es porque no encuentra el index.html y main.js en la raiz del proyecto. \\r\\n  \\r\\n  As\xed que vamos a configurar vite para que sepa d\xf3nde buscar los archivos index.html y main.js\\r\\n\\r\\n## 5. Configurando vite con el archivo `Vite.config.js`\\r\\nCreamos el archivo `vite.config.js` en la raiz del proyecto y copiamos el siguiente c\xf3digo (que puedes encontrar en el manual de vite). En los comentarios ver\xe1s que funci\xf3n tiene cada l\xednea aunque de momento no le des demasiada importancia.\\r\\n\\r\\n```js title=\\"vite.config.js\\"\\r\\nimport path from \'path\' // Para gestionar directorios\\r\\n\\r\\nexport default {\\r\\n  // Definimos la carpeta donde buscar cuando se carga la aplicaci\xf3n (donde estar\xe1 el main.js)\\r\\n  root: path.resolve(__dirname, \'src\'), \\r\\n  \\r\\n  build: {\\r\\n    rollupOptions: {\\r\\n        /*\\r\\n            Opciones de configuraci\xf3n de Rollup externas, ser\xe1n mergeadas con la configuracion\\r\\n            interna de Rollup de Vite.\\r\\n        */\\r\\n        input: {\\r\\n            main: path.resolve(__dirname, \'src/index.html\'), // Indicamos las p\xe1ginas que debe analizar\\r\\n        },\\r\\n        output: {\\r\\n            dir: path.resolve(__dirname, \'dist\'), //Donde se va a crear el build de nuestra aplicacion\\r\\n            format: \'es\', //Formato de ES modules\\r\\n        },\\r\\n    },\\r\\n    outDir: path.resolve(__dirname, \'dist\'),\\r\\n    minify: false, //( Si no se quiere minificar el build) https://vitejs.dev/config/#build-minify (aplica solo a los JS no CSS)\\r\\n},\\r\\n  server: {\\r\\n    /*port: 8080, */ // Podemos definir el puerto de salida\\r\\n    hot: true\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\nObserva que los componentes header y footer los exportamos con un nombre fijo `export const header = {}`, y `export const footer = {}`. Pero en el caso de homeVista usamos `export default {}` Esto lo hacemos para poder gestionar el cambio de p\xe1ginas de la aplicaci\xf3n. Mas adelante lo explicaremos con m\xe1s detalle.\\r\\n\\r\\n\xa1Ahora s\xed que podemos ver nuestra aplicaci\xf3n funcionando! \\r\\n\\r\\nEst\xe1 compuesta de tres componentes, el header.js que hemos inyectado en la etiqueta `<header>`, el footer.js que hemos inyectado en la etiqueta `<footer>` y el componente homeVista.js que hemos inyectado en la etiqueta `<main>`.\\r\\n\\r\\nA este \xfaltimo (homevista.js) le hemos a\xf1adido al final la palabra `vista`para indicar que representa una p\xe1gina web, en este caso la p\xe1gina Home.\\r\\n\\r\\n![home](/imagenes/v1/spa/home.png)\\r\\n\\r\\n\\r\\n## 4. Instalando Bootstrap, Bootswatch y SASS\\r\\n\\r\\nEn la construcci\xf3n de prototipos html hemos utilizado Bootstrap mediante el cdn. Es una manera sencilla y r\xe1pida, pero en los proyectos reales solemos descargar los archivos para no tener que depender de terceros.\\r\\n\\r\\nComo hemos visto anteriormente, Bootstrap funciona con SASS, por lo que necesitamos instalar y configurar nuestro proyecto para que convierte los archivos sass en css estandar.\\r\\n\\r\\n- Para instalar bootstrap y  bootswatch abre un terminal y ejecuta la siguiente linea de comandos:\\r\\n  ```\\r\\n  npm i bootstrap bootswatch @popperjs/core\\r\\n  ```\\r\\n  :::info\\r\\n  En lugar de escribir `install`escribimos `i`\\r\\n  :::\\r\\n- Instala ahora sass\\r\\n  ```\\r\\n  npm i sass -D\\r\\n  ```\\r\\n  :::info\\r\\n  Utilizamos -D para indicar que la dependencia instalada es de desarrollo, es decir, no la necesitaremos cuando despleguemos nuestra app en producci\xf3n\\r\\n  :::\\r\\n  \\r\\nSi la instalaci\xf3n se ha completado con \xe9xito podemos ver en el archivo package.json las dependencias instaladas:\\r\\n\\r\\n```json title=\\"package.json\\" {12,16,17,18}\\r\\n{\\r\\n  \\"name\\": \\"vanillagames10\\",\\r\\n  \\"private\\": true,\\r\\n  \\"version\\": \\"0.0.0\\",\\r\\n  \\"type\\": \\"module\\",\\r\\n  \\"scripts\\": {\\r\\n    \\"dev\\": \\"vite\\",\\r\\n    \\"build\\": \\"vite build\\",\\r\\n    \\"preview\\": \\"vite preview\\"\\r\\n  },\\r\\n  \\"devDependencies\\": {\\r\\n    \\"sass\\": \\"^1.66.1\\",\\r\\n    \\"vite\\": \\"^4.1.0\\"\\r\\n  },\\r\\n  \\"dependencies\\": {\\r\\n    \\"@popperjs/core\\": \\"^2.11.8\\",\\r\\n    \\"bootstrap\\": \\"^5.3.1\\",\\r\\n    \\"bootswatch\\": \\"^5.3.1\\"\\r\\n  }\\r\\n}\\r\\n\\r\\n```\\r\\n- Vamos a crear ahora la carpeta `src/scss` y dentro creamos el archivo `styles.scss `\\r\\n- Modificamos el archivo `vite.config.js` para que se procese **sass** a\xf1adiendo la siguiente linea:\\r\\n```js\\r\\nalias: {\\r\\n      \'~bootstrap\': path.resolve(__dirname, \'node_modules/bootstrap\'),\\r\\n      \'~bootswatch\': path.resolve(__dirname, \'node_modules/bootswatch\')\\r\\n    }\\r\\n```\\r\\nEl archivo vite.config.js quedar\xeda as\xed:\\r\\n```js  title=\\"vite.config.js\\"\\r\\nimport path from \'path\'\\r\\n\\r\\nexport default {\\r\\n  root: path.resolve(__dirname, \'src\'), // Carpeta donde alojamos el archivo main.js\\r\\n  resolve: {\\r\\n    alias: {\\r\\n      \'~bootstrap\': path.resolve(__dirname, \'node_modules/bootstrap\'),\\r\\n      \'~bootswatch\': path.resolve(__dirname, \'node_modules/bootswatch\'),\\r\\n    }\\r\\n  },\\r\\n  build: {\\r\\n    rollupOptions: {\\r\\n        /*\\r\\n            Opciones de configuraci\xf3n de Rollup externas, ser\xe1n mergeadas con la configuracion\\r\\n            interna de Rollup de Vite.\\r\\n        */\\r\\n        input: {\\r\\n            main: path.resolve(__dirname, \'src/index.html\'), // Indicamos las p\xe1ginas que debe analizar\\r\\n        },\\r\\n        output: {\\r\\n            dir: path.resolve(__dirname, \'dist\'), //Donde se va a crear el build de nuestra aplicacion\\r\\n            format: \'es\', //Formato de ES modules\\r\\n        },\\r\\n    },\\r\\n    outDir: path.resolve(__dirname, \'dist\'),\\r\\n    minify: false, //( Si no se quiere minificar el build) https://vitejs.dev/config/#build-minify (aplica solo a los JS no CSS)\\r\\n},\\r\\n  server: {\\r\\n    /*port: 8080,*/  // Podemos definir el puerto de salida\\r\\n    hot: true\\r\\n  }\\r\\n}\\r\\n```\\r\\n- En el archivo `styles.scss` cargamos la libreria bootstrap\\r\\n```js title=\\"styles.scss\\"\\r\\n// Import all of Bootstrap\'s CSS\\r\\n@import \\"~bootswatch/dist/yeti/variables\\";\\r\\n@import \\"~bootstrap/scss/bootstrap\\";\\r\\n@import \\"~bootswatch/dist/yeti/bootswatch\\";\\r\\n\\r\\n```\\r\\n- Finalmente importamos los estilos de scss\\r\\n\\r\\n```js title=\\"main.js\\"\\r\\n// Import all of Bootstrap\'s JS\\r\\nimport \'bootstrap\'\\r\\n\\r\\n// Import our custom CSS\\r\\nimport \'./scss/styles.scss\'\\r\\n\\r\\n```\\r\\n\\r\\n- Ejecutamos nuestro proyecto para verificar que todo est\xe1 ok mediante `npm run dev`. Deber\xedamos ver nuestra aplicaci\xf3n con las clases de **bootstrap** aplicandose y los estilos de **Bootswatch yeti**\\r\\n\\r\\n![yeti](/imagenes/v1/spa/yeti.png)\\r\\n\\r\\n- Continuamos configurando el archivo vite.config.js para que al generar las los archivos para desplegar en producci\xf3n (p\xe1ginas minificadas en la carpeta **dist**), las urls comiencen con `./` de manera que evitemos problemas al visualizar nuestra web cuando la subamos a un servidor como GitHub Pages. Para ello a\xf1adimos el c\xf3digo: \\r\\n```js\\r\\nbase: \'./\'\\r\\n```\\r\\n\\r\\nTambi\xe9n necesitamos decirle a vite que, cada vez que hagamos un build, se reescriba la carpeta dist. Para ello a\xf1adimos la siguiente opci\xf3n:\\r\\n```json\\r\\nbuild: {\\r\\n    emptyOutDir: true, // Esto vaciar\xe1 el directorio de salida antes de construir\\r\\n    ...\\r\\n}\\r\\n```\\r\\n\\r\\nNuestro archivo vite.config.js quedar\xeda as\xed:\\r\\n```js title=\\"vite.config.js\\"\\r\\nimport path from \'path\'\\r\\n\\r\\nexport default {\\r\\n  root: path.resolve(__dirname, \'src\'), // Carpeta donde alojamos el archivo main.js\\r\\n  base: \'./\',\\r\\n  resolve: {\\r\\n    alias: {\\r\\n      \'~bootstrap\': path.resolve(__dirname, \'node_modules/bootstrap\'),\\r\\n      \'~bootswatch\': path.resolve(__dirname, \'node_modules/bootswatch\'),\\r\\n    }\\r\\n  },\\r\\n  build: {\\r\\n    emptyOutDir: true, // Esto vaciar\xe1 el directorio de salida antes de construir\\r\\n    rollupOptions: {\\r\\n        /*\\r\\n            Opciones de configuraci\xf3n de Rollup externas, ser\xe1n mergeadas con la configuracion\\r\\n            interna de Rollup de Vite.\\r\\n        */\\r\\n        input: {\\r\\n            main: path.resolve(__dirname, \'src/index.html\'), // Indicamos las p\xe1ginas que debe analizar\\r\\n        },\\r\\n        output: {\\r\\n            dir: path.resolve(__dirname, \'dist\'), //Donde se va a crear el build de nuestra aplicacion\\r\\n            format: \'es\', //Formato de ES modules\\r\\n        },\\r\\n    },\\r\\n    outDir: path.resolve(__dirname, \'dist\'),\\r\\n    minify: false, //( Si no se quiere minificar el build) https://vitejs.dev/config/#build-minify (aplica solo a los JS no CSS)\\r\\n},\\r\\n  server: {\\r\\n    /*port: 8080,*/\\r\\n    hot: true\\r\\n  }\\r\\n}\\r\\n```\\r\\n## 6. Creando versi\xf3n de distribuci\xf3n\\r\\n\\r\\nVamos a crear la versi\xf3n de distribuci\xf3n de nuestra app. Esto crear\xe1 una carpeta **dist** con todos archivos html y css minificados. \\r\\n- Para ello, desde la terminal, ejecuta:\\r\\n  ```\\r\\n  npm run build\\r\\n  ```\\r\\n\\r\\n  Y efectivamente se ha creado una carpeta en la raiz del proyecto con los archivos necesarios. Esta es la carpeta que debemos subir a nuestro servidor de pruebas/producci\xf3n.\\r\\n\\r\\n- Prueba a abrir con live server el archivo index.html de la carpeta dist. Deber\xeda verse la aplicaci\xf3n funcionando correctamente.\\r\\n\\r\\n## 7. Instalando ESLint\\r\\n\\r\\n- Para utilizar en nuestro proyecto ESLint, en primer lugar instalaremos en **VSCode** el pluging **ESLint de Microsoft**.\\r\\n  \\r\\n  ![Eslint plugin](/imagenes/v1/spa/eslintplugin.png)\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n- Ahora instalamos **Eslint con la configuraci\xf3n standard**  \\r\\n  ```npm init @eslint/config -- --config semistandard\\r\\n  ```\\r\\n  Esto nos instalar\xe1 ESLint con la configuraci\xf3n Standard. Puedes comprobar que se ha creado un archivo de configuraci\xf3n con nombre `.eslintrc.cjs`\\r\\n\\r\\n- Finalmente vamos a configurar VSCode para que al grabar (pulsando ctrl + s) ESLint haga su trabajo, reparando, si puede, algunos errores de sintaxis y avisando (con una l\xednea subrayada roja) cuando puede haber un posible error en el c\xf3digo. \\r\\n  \\r\\n  \\r\\n- Para ello:\\r\\n  - Abre la paleta de comandos con `ctrl + shift + P` y escribe `settings json`\\r\\n  - Selecciona las preferencias de usuario: `Preferences: Open User Settings (JSON)`\\r\\n  - Asegurate de que tienes las siguiente linea en el archivo json\\r\\n    ```\\r\\n    \\"editor.codeActionsOnSave\\": {\\r\\n        \\"source.fixAll.eslint\\": true,\\r\\n    }\\r\\n    ```\\r\\n\\r\\n  Ahora, si abres un archivo y pulsas `ctrl + S` ver\xe1s como actua ESLint.\\r\\n\\r\\n## 8. Desplegando la aplicaci\xf3n en un servidor de pruebas (GitHub Pages)\\r\\nVamos a montarnos un sistema para poder hacer despliegue continuo. As\xed cada vez que actualicemos nuesta app, subiremos los cambios al repositorio y la publicaremos en el servidor de GitHub Pages.\\r\\n\\r\\n- Creamos un repositorio de git para el proyecto y lo sincronizamos con github (para ello utilizamos las herramientas de vscode)\\r\\n- Instalamos gh-pages con `npm i gh-pages -D`\\r\\n- Ahora creamos, en el package.json, el script **deploy** necesario para poder ejecturar el deploy a gh pages. \\r\\n\\r\\nEl archivo quedar\xeda as\xed: \\r\\n\\r\\n```json title=\\"package.json\\"\\r\\n{\\r\\n  \\"name\\": \\"trabajos_alumnos\\",\\r\\n  \\"private\\": true,\\r\\n  \\"version\\": \\"0.0.0\\",\\r\\n  \\"type\\": \\"module\\",\\r\\n  \\"scripts\\": {\\r\\n    \\"dev\\": \\"vite\\",\\r\\n    \\"build\\": \\"vite build --emptyOutDir\\",\\r\\n    \\"preview\\": \\"vite preview\\",\\r\\n    \\"deploy\\": \\"gh-pages -d dist\\"\\r\\n  },\\r\\n  \\"devDependencies\\": {\\r\\n    \\"gh-pages\\": \\"^5.0.0\\",\\r\\n    \\"sass\\": \\"^1.58.3\\",\\r\\n    \\"vite\\": \\"^4.1.0\\"\\r\\n  },\\r\\n  \\"dependencies\\": {\\r\\n    \\"@popperjs/core\\": \\"^2.11.6\\",\\r\\n    \\"bootstrap\\": \\"^5.2.3\\"\\r\\n  }\\r\\n}\\r\\n```\\r\\n- Ahora ya podemos ejecutar `npm run build` para contruir nuestra carpeta **dist** y a continuaci\xf3n `npm run deploy` para que se cree la rama gh-pages y se publique. Pru\xe9balo.\\r\\n- Finalmente, vamos a comprobar que se ha creado una **rama con nombre gh-pages** para el despliegue de nuestra app.\\r\\n  \\r\\n  ![rama github pages](/imagenes/v1/spa/ramagh.png)\\r\\n\\r\\n- Ahora solo falta configurar la rama gh-pages para que sea una p\xe1gina publica y muestre nuestra aplicaci\xf3n desplegada. Para ello entra en `Settings` (men\xfa superior) y `Pages` (men\xfa lateral izquierdo). A continuaci\xf3n selecciona la rama gh-pages y haz click en `save`\\r\\n\\r\\n:::note Nota\\r\\nPara poder publicar en GitHub Pages nuestro repositorio debe ser p\xfablico. Si no lo es, puedes cambiar su visibilidad desde `Settings` (La opci\xf3n est\xe1 al final de la p\xe1gina).\\r\\n:::\\r\\n\\r\\n  ![gh](/imagenes/v1/spa/ghpublic.png)\\r\\n\\r\\n  En breve aparecer\xe1 la url. (Ten paciencia que a veces tarda unos minutos. Ves haciendo F5 hasta que aparezca)\\r\\n\\r\\n  ![gh](/imagenes/v1/spa/ghpublic2.png)\\r\\n\\r\\n\xa1Y ya puedes visitar la p\xe1gina en el servidor!"},{"id":"commit","metadata":{"permalink":"/vanillaPill/blog/commit","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/commit.md","source":"@site/blog/commit.md","title":"Buenas pr\xe1cticas creando mensajes \'commit\'","description":"Es importante escribir mensajes de commit claros y descriptivos al trabajar con Git y GitHub. Los mensajes de commit ayudan a ti y a otros colaboradores a entender los cambios realizados en el proyecto a lo largo del tiempo.","date":"2023-08-14T08:39:24.000Z","formattedDate":"14 de agosto de 2023","tags":[{"label":"git","permalink":"/vanillaPill/blog/tags/git"},{"label":"github","permalink":"/vanillaPill/blog/tags/github"},{"label":"commit","permalink":"/vanillaPill/blog/tags/commit"}],"readingTime":2.99,"hasTruncateMarker":false,"authors":[{"name":"Carlos Arrebola Mont\xe1vez","title":"Profesor frontend fpllefia","url":"https://fpllefia.com","imageURL":"https://avatars.githubusercontent.com/u/61465929?v=4","key":"carrebola"}],"frontMatter":{"slug":"commit","title":"Buenas pr\xe1cticas creando mensajes \'commit\'","authors":"carrebola","tags":["git","github","commit"]},"prevItem":{"title":"Entorno de desarrollo II","permalink":"/vanillaPill/blog/Entorno de desarrollo II"},"nextItem":{"title":"\xa1Hola!","permalink":"/vanillaPill/blog/welcome"}},"content":"Es importante escribir mensajes de commit claros y descriptivos al trabajar con Git y GitHub. Los mensajes de commit ayudan a ti y a otros colaboradores a entender los cambios realizados en el proyecto a lo largo del tiempo. \\r\\n\\r\\nAqu\xed tienes algunos consejos para escribir mensajes de commit efectivos:\\r\\n\\r\\n\\r\\n1. Mant\xe9n los mensajes cortos y concisos: Los mensajes de commit deben ser breves pero informativos. Intenta resumir los cambios en una oraci\xf3n o dos.\\r\\n\\r\\n2. Usa el imperativo: Escribe los mensajes en tiempo presente y en imperativo. Por ejemplo, en lugar de \\"Agregado soporte para funci\xf3n X\\", escribe \\"Agregar soporte para funci\xf3n X\\". Esto hace que el mensaje sea m\xe1s claro y directo.\\r\\n\\r\\n3. Explica el qu\xe9 y el porqu\xe9: Describe qu\xe9 cambios introduces en el commit y, si es relevante, por qu\xe9 realizaste esos cambios. Esto ayuda a los dem\xe1s a comprender el contexto de tus modificaciones.\\r\\n\\r\\n4. Separa el resumen del cuerpo: Si un commit requiere una explicaci\xf3n m\xe1s detallada, coloca un resumen breve (m\xe1ximo 50-72 caracteres) en la primera l\xednea y luego agrega un espacio en blanco seguido de un p\xe1rrafo o m\xe1s de explicaci\xf3n adicional.\\r\\n\\r\\n5. Utiliza las palabras clave: Puedes usar palabras clave al comienzo de tus mensajes para indicar el tipo de cambio que realizaste. Algunas palabras clave comunes son \\"**Agrega**\\", \\"**Corrige**\\", \\"**Modifica**\\" y \\"**Elimina**\\".\\r\\n\\r\\n6. S\xe9 espec\xedfico: Evita mensajes gen\xe9ricos como \\"Arreglos varios\\" o \\"Cambios menores\\". Es mejor ser espec\xedfico sobre los cambios exactos que realizaste.\\r\\n\\r\\n7. Referencia los problemas: Si tu proyecto utiliza sistemas de seguimiento de problemas (como GitHub Issues), puedes hacer referencia a los n\xfameros de problema en tus mensajes de commit. Por ejemplo, \\"Arregla #123\\" vincular\xe1 el commit con el problema n\xfamero 123.\\r\\n\\r\\n8. Rev\xedsalo antes de confirmar: Antes de confirmar tus cambios, t\xf3mate un momento para revisar el mensaje de commit y asegurarte de que sea claro y preciso.\\r\\n\\r\\n9. Mant\xe9n un estilo consistente: Si trabajas en un equipo, es \xfatil mantener un estilo de mensajes de commit consistente en todo el proyecto. Esto facilita la lectura y comprensi\xf3n de los cambios a lo largo del tiempo.\\r\\n\\r\\n10. No tengas miedo de editar: Si te das cuenta de que un mensaje de commit no es claro o no sigue las pautas, no dudes en editar el mensaje antes de hacer push.\\r\\n\\r\\nEstos podr\xedan ser algunos ejemplos:\\r\\n\\r\\n```\\r\\nAgrega una nueva funci\xf3n al formulario de registro:\\r\\n  Agrega validaci\xf3n de longitud al campo de contrase\xf1a\\r\\n```\\r\\n\\r\\n```\\r\\nCorrige el error de dise\xf1o en la p\xe1gina de inicio de sesi\xf3n:\\r\\n    Corrige el desplazamiento horizontal en el formulario de inicio de sesi\xf3n\\r\\n```\\r\\n\\r\\n```\\r\\nModifica el estilo de los botones en la barra de navegaci\xf3n:\\r\\n  Modifica el estilo de los botones de la barra de navegaci\xf3n para que sean m\xe1s visibles\\r\\n```\\r\\n\\r\\n```\\r\\nElimina la funci\xf3n de actualizaci\xf3n de perfil obsoleta:\\r\\n  Elimina la funci\xf3n de actualizaci\xf3n de perfil sin uso y sus dependencias\\r\\n```\\r\\n\\r\\n```\\r\\nA\xf1ade im\xe1genes de avatar para los perfiles de usuario:\\r\\n  Arregla el enlace incorrecto en la p\xe1gina de contacto que redirig\xeda a una URL no existente\\r\\n```\\r\\n\\r\\n```\\r\\nRefactoriza la l\xf3gica del manejo de errores en la API:\\r\\n  Refactoriza el manejo de errores en la API para mejorar la legibilidad y la reutilizaci\xf3n del c\xf3digo\\r\\n```\\r\\n\\r\\n```\\r\\nOptimiza la carga de im\xe1genes en la p\xe1gina de galer\xeda:\\r\\n  Optimiza la carga de im\xe1genes en la p\xe1gina de galer\xeda para reducir el tiempo de carga y mejorar la experiencia del usuario\\r\\n```\\r\\n\\r\\n```\\r\\nCrea la estructura b\xe1sica de la p\xe1gina de productos:\\r\\n  Agrega el esqueleto HTML y los estilos iniciales para la p\xe1gina de visualizaci\xf3n de productos\\r\\n```"},{"id":"welcome","metadata":{"permalink":"/vanillaPill/blog/welcome","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/0-Hola/index.md","source":"@site/blog/0-Hola/index.md","title":"\xa1Hola!","description":"\xa1Hola!.","date":"2023-06-15T17:59:26.000Z","formattedDate":"15 de junio de 2023","tags":[{"label":"facebook","permalink":"/vanillaPill/blog/tags/facebook"},{"label":"hello","permalink":"/vanillaPill/blog/tags/hello"},{"label":"docusaurus","permalink":"/vanillaPill/blog/tags/docusaurus"}],"readingTime":0.7,"hasTruncateMarker":false,"authors":[{"name":"Carlos Arrebola Mont\xe1vez","title":"Profesor frontend fpllefia","url":"https://fpllefia.com","imageURL":"https://avatars.githubusercontent.com/u/61465929?v=4","key":"carrebola"}],"frontMatter":{"slug":"welcome","title":"\xa1Hola!","authors":["carrebola"],"tags":["facebook","hello","docusaurus"]},"prevItem":{"title":"Buenas pr\xe1cticas creando mensajes \'commit\'","permalink":"/vanillaPill/blog/commit"},"nextItem":{"title":"Descargar im\xe1genes vectoriales para tu avatar","permalink":"/vanillaPill/blog/imagenesAvatar"}},"content":"\xa1Hola!.\\r\\nMe llamo **Carlos Arrebola**. Soy profe en el centro de formaci\xf3n profesional Llefi\xe1, (**fpllefia** para los amigos).\\r\\n\\r\\nEstudi\xe9 FP (electr\xf3nica) precisamente en fpllefia, de eso ya hace muuuucho tiempo. Cuando acab\xe9, dej\xe9 la escuela para seguir estudiando **ingenier\xeda electr\xf3nica** en la UPC. No pasaron ni 4 a\xf1os cuando tuve la suerte de volver a fpllefia, pero esta vez como profe \ud83d\ude0a\\r\\n\\r\\nDespu\xe9s de mucha electr\xf3nica, mis inquietudes creativas me llevaron a estudiar un **grado en MULTIMEDIA en la UOC**, gracias al cual acab\xe9 siendo profe de desarrollo web (frontend) en los ciclos formativos de *Sistemas microinformaticos y redes* de grado medio y, sobre todo, en el ciclo de **Desarrollo de aplicaciones web (DAW) en grado superior**.\\r\\n\\r\\nY aqu\xed estamos, seguimos estudiando, ense\xf1ando lo que me dejan, y disfrutando del apasionante mundo de la **docencia** y el **desarrollo web**.\\r\\n\\r\\n\\r\\n![magen](/img/yo.png)"},{"id":"imagenesAvatar","metadata":{"permalink":"/vanillaPill/blog/imagenesAvatar","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-06-15 imagenes avatar/imagenes avatar.md","source":"@site/blog/2023-06-15 imagenes avatar/imagenes avatar.md","title":"Descargar im\xe1genes vectoriales para tu avatar","description":"Aqu\xed puedes descargar imagenes svg para tu avatar:","date":"2023-06-15T00:00:00.000Z","formattedDate":"15 de junio de 2023","tags":[],"readingTime":0.06,"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"imagenesAvatar","title":"Descargar im\xe1genes vectoriales para tu avatar"},"prevItem":{"title":"\xa1Hola!","permalink":"/vanillaPill/blog/welcome"},"nextItem":{"title":"Entorno de desarrollo I","permalink":"/vanillaPill/blog/Entorno de desarrollo I"}},"content":"### Aqu\xed puedes descargar imagenes svg para tu avatar:\\r\\n[https://www.svgrepo.com/svg/170303/avatar](https://www.svgrepo.com/svg/170303/avatar)\\r\\n\\r\\n\\r\\n![Imagen avatar](./avatar.png)"},{"id":"/Entorno de desarrollo I","metadata":{"permalink":"/vanillaPill/blog/Entorno de desarrollo I","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/Entorno de desarrollo I.md","source":"@site/blog/Entorno de desarrollo I.md","title":"Entorno de desarrollo I","description":"Vamos a instalar VSCode y a configurar algunos temas y extensiones como prettier o live server.","date":"2023-05-26T14:20:05.000Z","formattedDate":"26 de mayo de 2023","tags":[],"readingTime":9.985,"hasTruncateMarker":true,"authors":[],"frontMatter":{},"prevItem":{"title":"Descargar im\xe1genes vectoriales para tu avatar","permalink":"/vanillaPill/blog/imagenesAvatar"},"nextItem":{"title":"MDX Blog Post","permalink":"/vanillaPill/blog/mdx-blog-post"}},"content":"Vamos a instalar VSCode y a configurar algunos temas y extensiones como prettier o live server. \\r\\n\\r\\nTambi\xe9n vamos a aprender a manejar git y github desde nuestro ID f\xe1cilmente. \\r\\n\\r\\nFinalmente aprenderemos a desplegar nuestro proyecto en un entorno de prueba como github pages.\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n## 1. VSCode\\r\\n\\r\\nSin duda, en le momento de escribir esta documentaci\xf3n, el rey de los IDs es, sin duda, Visual Studio Code (VSCode).\\r\\n\\r\\n\\r\\n<img src={\\"https://upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Visual_Studio_Code_1.35_icon.svg/2048px-Visual_Studio_Code_1.35_icon.svg.png\\"} width={\\"200\\"}/>\\r\\n\\r\\n\\r\\n:::note\\r\\n\\r\\n**VSCode** es un programa muy \xfatil para escribir c\xf3digo. Es como una navaja suiza para los desarrolladores. Te permite **editar y organizar tus archivos** de c\xf3digo de manera f\xe1cil y r\xe1pida. Adem\xe1s, tiene un mont\xf3n de **extensiones** y herramientas fant\xe1sticas que te facilitan la vida, como **autocompletado**, **depuraci\xf3n** y **control de versiones**. En resumen, es como el mejor amigo de un programador, siempre dispuesto a ayudarte a escribir c\xf3digo de manera eficiente.\\r\\n\\r\\n:::\\r\\n\\r\\nOs hago un resumen de algunas aspectos que debes tener en cuenta a la hora de instalar y configurar VSCode, y te pondr\xe9 informaci\xf3n ampliada ya que es un tema muy trillado en internet:\\r\\n### 1.1. Descarga e instala VSCode \\r\\n[Puedes encontrar la versi\xf3n oficial de vscode aqu\xed: [VSCODE](https://code.visualstudio.com/)\\r\\n### 1.2. Elige el tema que m\xe1s te guste. \\r\\nPuedes tunear tu VSCode instalando diferentes temas. Para ello:\\r\\n\\r\\n- Desde el buscador de extensiones (ctrl + mayus + X) escribe el nombre del tema que quieres instalar.\\r\\n- Haz clic en instalar extensi\xf3n.\\r\\n- Desde el icono de configuraci\xf3n de vscode (la tuerquecita de abajo a la izquierda) selecciona \'**Temas > Tema de color**\'\\r\\n- Selecciona el tema que has instalado y... \xa1ya lo tienes!\\r\\n\\r\\n:::tip \\r\\n\\r\\nEn este enlace puedes encontrar algunos temas para instalar en tu VSCode: [Themes VSCode](https://vscodethemes.com/?type=dark)\\r\\n\\r\\nY aqu\xed te dejo una tabla de algunos temas que nos recomienda el amigo \'Manz\'\\r\\n<details>\\r\\n  <summary>Tabla de temas recomendados</summary>\\r\\n  \\r\\n  Estos son algunos de los temas que nos recomienda <a href=\\"https://terminaldelinux.com/terminal/preparacion-entorno/instalar-vscode/\\">Manz</a>\\"\\r\\n\\r\\n\\r\\n    \ud83c\udf08 Flatland Monokai\\r\\n    \ud83d\udc40 Enfocado Theme\\r\\n    \ud83d\udfe1 Bluloco Dark Theme\\r\\n    \ud83e\uddd4 Bearded Theme\\r\\n    \ud83d\udc3c Panda Theme\\r\\n    \ud83d\udfe3 2077 Theme\\r\\n    \ud83e\udddb\u200d\u2640\ufe0f Dracula Dark Theme\\r\\n    \ud83d\udca0 SynthWave 84\\r\\n    \ud83e\udd0d GitHub Light Theme\\r\\n    \ud83d\ude38 Gatito Theme\\r\\n    \ud83d\udc9a Vue Theme\\r\\n    \u26ab One Monokai Theme\\r\\n    \ud83c\udf03 Palenight Theme\\r\\n    \ud83d\udc67 Doki Theme\\r\\n    \ud83d\uddfb Monokai Theme\\r\\n    \ud83d\udd35 Cobalt2 Theme\\r\\n    \ud83d\udc3a Winter is Coming\\r\\n</details>\\r\\n\\r\\n:::\\r\\n\\r\\n### 1.3. Instala un tema de iconos, por ejemplo [VSCode Icons](https://marketplace.visualstudio.com/items?itemName=vscode-icons-team.vscode-icons) o [Material Icon](https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme)\\r\\n\\r\\nPara instalar los iconos el proceso es el mismo:\\r\\n\\r\\n  - Desde el buscador de extensiones escribe el nombre del tema de iconos\\r\\n  - En configuraci\xf3n, selecciona \'**Tema > Tema de icono de archivo**\' y busca el tema instalado.\\r\\n  - Ahora ver\xe1s que en la columna de la izquierda, cada archivo tiene un icono diferente en funci\xf3n de su extensi\xf3n: html, css, etc.\\r\\n\\r\\n### 1.4. Extensiones\\r\\n\\r\\nCon las extensiones puedes aumentar la potencia y mejorar tu flujo de trabajo. \\r\\n#### Prettier\\r\\nUna de las extensiones que te recomiendo s\xed o s\xed es \'**Prettier**\'. Esta extensi\xf3n se va a encargar de formatear tu c\xf3digo HTML y CSS port t\xed, respetando las identaciones.\\r\\nEl proceso para instalar esta extensi\xf3n es muy simple, solo tienes que buscar la extensi\xf3n en el buscador y darle a instalar.\\r\\n\\r\\n:::tip C\xf3mo formatear autom\xe1ticamente en VS Code para ahorrar tiempo y esfuerzo\\r\\n\\r\\nAqu\xed tienes un art\xedculo donde se explica como instalar y configurar Prettier para que el c\xf3digo se formatee cada vez que guardamos nuestro archivo:\\r\\n\\r\\n<a href={\\"https://geekflare.com/es/auto-format-in-vs-code/\\"}>C\xf3mo formatear autom\xe1ticamente en VS Code para ahorrar tiempo y esfuerzo</a>\\r\\n\\r\\n:::\\r\\n#### Live Server\\r\\nOtra extensi\xf3n imprescindible para nosotros es **Live Server**. Mediante esta extensi\xf3n podremos tener un servidor virtual que mostrar\xe1 el resultado de nuestro trabajo en un navegador, con la ventaja de que la vista se ir\xe1 actualizando conforme vamos modificando el c\xf3digo.\\r\\n\\r\\nExisten infinidad de extensiones para VSCode\\r\\nAqu\xed puedes ver un ejemplo de mi entorno. Utilizo el tema **Night Owl** y los iconos de **VSCode Icons**.\\r\\nFijate que el c\xf3digo html est\xe1 formateado con **Prettier**\\r\\n\\r\\n![Tema VSCode e Iconos](/imagenes/entorno/entornovscode.png)\\r\\n\\r\\nDe momento, con esto es suficiente para comenzar a trabajar en el desarrollo de los prototipos html y css. M\xe1s adelante acabaremos de configurar nuestro entorno para trabajar con NodeJS y otras herramientas que nos ayudar\xe1n a programar de forma m\xe1s eficiente.\\r\\n\\r\\n## 2. Control de versiones - Git\\r\\n\\r\\nPara el control de versiones vamos a instalar y configurar Git. Aunque seguro que a estas alturas ya sabes qu\xe9 es Git, pero deja que te refresque algunas ideas importantes:\\r\\n\\r\\n:::info \\r\\n\\r\\n\u2714 Git es como un superpoderoso **control de versiones para tu c\xf3digo**. Imagina que est\xe1s escribiendo un ensayo importante y cada vez que haces cambios guardas una nueva versi\xf3n en diferentes archivos, como \\"ensayo_v1\\", \\"ensayo_v2\\" y as\xed sucesivamente. Git hace algo similar pero para tu c\xf3digo.\\r\\n\\r\\n\u2714 Con Git, puedes **guardar diferentes versiones de tu proyecto a medida que avanzas**. Esto significa que si cometes un error o quieres volver a una versi\xf3n anterior, \xa1es pan comido! Git te permite viajar en el tiempo y regresar a cualquier punto en la historia de tu proyecto.\\r\\n\\r\\n\u2714 Pero eso no es todo. Git tambi\xe9n es **excelente para trabajar en equipo**. Puedes colaborar con otros programadores sin pisar los pies de nadie. Cada persona puede trabajar en su propia versi\xf3n del proyecto y luego combinar los cambios de todos de manera ordenada.\\r\\n\\r\\n\u2714 Adem\xe1s, Git hace que **compartir tu c\xf3digo** sea s\xfaper f\xe1cil. Puedes subir tu proyecto a un repositorio en l\xednea (como **GitHub** o GitLab) y otras personas pueden descargarlo y contribuir. Incluso puedes colaborar con desarrolladores de todo el mundo en proyectos de c\xf3digo abierto.\\r\\n\\r\\nAprender git es muy importante para un desarrollador web. Por suerte lo vas a estudiar (si no lo has hecho ya) en el ciclo de DAW. De todas formas te dejo un enlace con m\xe1s informaci\xf3n que te ser\xe1 muy util para entender conceptos como que es una rama, como subir ramas al repositorio, clonarlas, sincronizarlas etc: \\r\\n\\r\\n[\ud83d\udc49Hello Git & GitHub\ud83d\udc48](https://github.com/mouredev/hello-git)\\r\\n:::\\r\\n\\r\\nVamos a instalar (si aun no est\xe1 instalado) Git. Para ello:  \\r\\n1. Descarga su \xfaltima versi\xf3n de la web oficial: [Download Git](https://git-scm.com/).\\r\\n2. Instala en tu ordenador el software.\\r\\n3. Configura git para tu usuario:\\r\\n  \\r\\n   - Lo primero que deber\xe1s hacer cuando instales Git es establecer tu nombre de usuario y direcci\xf3n de correo electr\xf3nico. Esto es importante porque los \\"commits\\" de Git usan esta informaci\xf3n, y es introducida de manera inmutable en los commits que env\xedas:\\r\\n\\r\\n  ```\\r\\n    $ git config --global user.name \\"John Doe\\"\\r\\n    $ git config --global user.email johndoe@example.com  \\r\\n  ```\\r\\nS\xf3lo necesitas hacer esto una vez si especificas la opci\xf3n --global, ya que Git siempre usar\xe1 esta informaci\xf3n para todo lo que hagas en ese sistema\\r\\n\\r\\n:::info \\r\\n\u2714\ufe0f Tienes m\xe1s informaci\xf3n de c\xf3mo configurar Git aqu\xed: \\r\\n\\r\\n[\ud83d\udc49Configurando Git por primera vez\ud83d\udc48](https://git-scm.com/book/es/v2/Inicio---Sobre-el-Control-de-Versiones-Configurando-Git-por-primera-vez)\\r\\n\\r\\n\u2714\ufe0f Si quieres aprender m\xe1s sobre git tambi\xe9n puedes consultar este recurso de Obdulia Montiel:\\r\\n\\r\\n[\ud83d\udc49La gu\xeda para principiantes de Git y Github\ud83d\udc48](https://www.freecodecamp.org/espanol/news/guia-para-principiantes-de-git-y-github/)\\r\\n\\r\\n::: \\r\\n\\r\\n\\r\\n## 3. Repositorio en linea - Github\\r\\n\\r\\nAhora que tenemos Git instalado en nuestro ordenador, vamos crearnos una cuenta en Github para poder sincronizar todo nuestro trabajo en la nube.\\r\\n\\r\\n:::info \xbfQu\xe9 es y para que sirve Github?\\r\\n\\r\\n\u2714\ufe0f GitHub es una especie de red social para programadores. Es un lugar en l\xednea donde los desarrolladores pueden **compartir y trabajar en proyectos de software**.\\r\\n\\r\\n\u2714\ufe0f Funciona como un **repositorio** donde se guarda el c\xf3digo de **diferentes versiones** de un proyecto. Permite la **colaboraci\xf3n entre programadores**, quienes pueden ver y sugerir cambios en el c\xf3digo.\\r\\n\\r\\n\u2714\ufe0f Es una herramienta muy popular y \xfatil en la comunidad de **desarrollo de software**.\\r\\n:::\\r\\n\\r\\n1. En primer lugar vamos a acceder [github.com](https://github.com/)\\r\\n2. Crea una cuenta e inicia sesi\xf3n.\\r\\n3. Ahora vamos a crear un proyecto de prueba con vscode, craremos un repositorio y lo sincronizaremos con github.\\r\\n   \\r\\n## Configurando entorno y subiendo p\xe1gina de pruebas\\r\\n\\r\\nVamos a ver un ejemplo de todo el proceso. La idea es instalar y configurar nuestro entorno de desarrollo para despu\xe9s crear una p\xe1gina web, guardar una versi\xf3n en git, subirla a github y publicarla en github pages. Vamos a por ello:\\r\\n\\r\\n1. Instala VSCode si no la has hecho a\xfan.\\r\\n2. Config\xfaralo con el tema que m\xe1s te guste, los iconos que decidas e instala las extensiones **live server** y **prettier**.\\r\\n3. Crea una carpeta en tu ordenador con nombre `pruebas`\\r\\n7. Abre VSCode y arrastra la carpeta dentro de la ventana central.\\r\\n8. Crea un archivo con nombre index.html (algo b\xe1sico, con un h1 y poco m\xe1s).\\r\\n9. Muestra el resultado en el navegador utilizando **live server**.\\r\\n4. Configura prettier para que al guardar con `ctrl + S` se aplique formateado de tu c\xf3digo. Pruebalo.\\r\\n5. Instala Git si no lo has hecho a\xfan.\\r\\n6. Configura tu usuario o confirma que ya est\xe1 configurado.\\r\\n7. Haz clic en el icono de \'**Control de fuente**\' de tu vscode o pulsa `ctrl + Mayus + G`\\r\\n8. Aparecer\xe1 un mensaje que te indica que no tienes repositorio creado, y te dar\xe1 la opci\xf3n de crearlo desde aqu\xed. Hazlo\\r\\n   \\r\\n   ![Creando repositorio git](/imagenes/entorno/pruebas.png)\\r\\n\\r\\n   ![Confirmar](/imagenes/entorno/confirmgit.png)\\r\\n\\r\\n9. Escribe un mensaje de inicio de repositorio (por ejemplo \'*primer commit de git*\') y dale a confirmar.\\r\\n10. Ahora te pedir\xe1 si quieres **publicar la rama** (\'*Branch*\'). Dile que s\xed. Al hacer clic te preguntar\xe1 qu\xe9 nombre quieres para el repositorio y si quieres que sea privado o p\xfablico. Por defecto, el nombre del repositorio coincide con el nombre de la carpeta de tu proyecto, pero puedes cambiarlo si lo deseas. Para esta prueba haremos que nuestro repositorio sea p\xfablico.\\r\\n11. Si es la primera vez que conectas tu VSCode con github te pedir\xe1 que lo sincronices. Utiliza la opci\xf3n de confirmar a trav\xe9s de VSCode.\\r\\n12. Una vez publicado tu archivo en github podr\xe1s ver, en tu p\xe1gina de github (por ejemplo `carrebola.github.com`), algo as\xed:\\r\\n\\r\\n![Github con proyecto nuevo](/imagenes/entorno/github.png)\\r\\n\\r\\n:::info \xbfC\xf3mo utilizar Git desde Visual Studio Code?\\r\\n\\r\\nAqu\xed te dejo un enlace a un art\xedculo de donde nos explica como trabajar con git y github desde VSCode:\\r\\n\\r\\n [\ud83d\udc49\xbfC\xf3mo utilizar Git desde Visual Studio Code?\ud83d\udc48](https://programacionfacil.org/blog/como-utilizar-git-desde-visual-studio-code/)\\r\\n\\r\\n:::\\r\\n\\r\\n1.  Vamos a **documentar** de forma b\xe1sica nuestro proyecto *prueba*. Para ello vamos ahora a crear un archivo **readme.md** para que github muestre informaci\xf3n del proyecto publicado en su pantalla inicial:\\r\\n  - Crea un archivo con nombre **readme.md** en la raiz de la carpeta del proyecto.\\r\\n  - Escribe dentro un texto descriptivo del proyecto, como por ejemplo:\\r\\n    \\r\\n```\\r\\n# Configurando nuestro entorno de desarrollo\\r\\n\\r\\n1. Instalaci\xf3n de VSCode\\r\\n2. Configurarci\xf3n de git y github\\r\\n3. Pruebas con proyecto\\r\\n\\r\\n``` \\r\\nSi abrimos ahora github podemos ver como se muestra esta informaci\xf3n en la portada del repositorio de github.\\r\\n\\r\\n![Prueba readme.md](/imagenes/entorno/pruebamarkdown.png)\\r\\n\\r\\n:::tip \\r\\n\\r\\nF\xedjate que el `#` equivale a un `<h1></h1>` y que la numeraci\xf3n se comporta como una lista ordenada `<ol></ol>`. Este tipo de lenguaje se llama **Markdown**.\\r\\n\\r\\n:::\\r\\n\\r\\n:::info Aprende Markdown\\r\\nSi quieres saber m\xe1s de este sencillo y potente lenguaje aqu\xed tienes m\xe1s informaci\xf3n:\\r\\n\\r\\n[\ud83d\udc49 **MARKDOWN**\ud83d\udc48](https://desarrolloweb.com/home/markdown)\\r\\n:::\\r\\n\\r\\n14. Para terminar vamos a subir nuestro proyecto a github pages. Para ello:\\r\\n    - Haz clic en `Settings` (el icono con forma de engranaje de la parte superior)\\r\\n    - Entra en Pages (opci\xf3n que encontrar\xe1s en el men\xfa lateral izquierdo)\\r\\n    - Donde pone `Branch` selecciona la rama `main` y haz clic en `Save`.\\r\\n    - Si todo ha ido bien, la p\xe1gina se est\xe1 publicando... Espera un minuto y refresca la p\xe1gina con F5\\r\\n    - Ahora puedes ver la url donde se ha publicado tu p\xe1gina. Haz clic en el enlace o en el bot\xf3n `Visit site` y podr\xe1s ver la web publicada.\\r\\n\\r\\n![Publicaci\xf3n en github pages](/imagenes/entorno/githubpages.png)\\r\\n\\r\\n:::info\\r\\n**GitHub Pages** es como un servidor web est\xe1tico gratuito para que los desarrolladores **muestren su trabajo al mundo**. B\xe1sicamente, puedes tomar tus proyectos de GitHub y convertirlos en p\xe1ginas web p\xfablicas para que cualquiera las vea.\\r\\n:::\\r\\n\\r\\nY hasta aqu\xed la configuraci\xf3n de nuestro entorno de desarrollo, al menos la versi\xf3n b\xe1sica. M\xe1s adelante aprenderemos a trabajar con otras herramientas como nodejs, eslint, etc, pero de momento, con este entorno, ya **estamos preparados para crear los prototipos en html y css** de la primera versi\xf3n de nuestro proyecto."},{"id":"mdx-blog-post","metadata":{"permalink":"/vanillaPill/blog/mdx-blog-post","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2021-08-01-mdx-blog-post.mdx","source":"@site/blog/2021-08-01-mdx-blog-post.mdx","title":"MDX Blog Post","description":"Blog posts support Docusaurus Markdown features, such as MDX.","date":"2021-08-01T00:00:00.000Z","formattedDate":"1 de agosto de 2021","tags":[{"label":"docusaurus","permalink":"/vanillaPill/blog/tags/docusaurus"}],"readingTime":0.175,"hasTruncateMarker":false,"authors":[{"name":"S\xe9bastien Lorber","title":"Docusaurus maintainer","url":"https://sebastienlorber.com","imageURL":"https://github.com/slorber.png","key":"slorber"}],"frontMatter":{"slug":"mdx-blog-post","title":"MDX Blog Post","authors":["slorber"],"tags":["docusaurus"]},"prevItem":{"title":"Entorno de desarrollo I","permalink":"/vanillaPill/blog/Entorno de desarrollo I"},"nextItem":{"title":"Long Blog Post","permalink":"/vanillaPill/blog/long-blog-post"}},"content":"Blog posts support [Docusaurus Markdown features](https://docusaurus.io/docs/markdown-features), such as [MDX](https://mdxjs.com/).\\r\\n\\r\\n:::tip\\r\\n\\r\\nUse the power of React to create interactive blog posts.\\r\\n\\r\\n```js\\r\\n<button onClick={() => alert(\'button clicked!\')}>Click me!</button>\\r\\n```\\r\\n\\r\\n<button onClick={() => alert(\'button clicked!\')}>Click me!</button>\\r\\n\\r\\n:::"},{"id":"long-blog-post","metadata":{"permalink":"/vanillaPill/blog/long-blog-post","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2019-05-29-long-blog-post.md","source":"@site/blog/2019-05-29-long-blog-post.md","title":"Long Blog Post","description":"This is the summary of a very long blog post,","date":"2019-05-29T00:00:00.000Z","formattedDate":"29 de mayo de 2019","tags":[{"label":"hello","permalink":"/vanillaPill/blog/tags/hello"},{"label":"docusaurus","permalink":"/vanillaPill/blog/tags/docusaurus"}],"readingTime":2.05,"hasTruncateMarker":true,"authors":[{"name":"Carlos Arrebola Mont\xe1vez","title":"Profesor frontend fpllefia","url":"https://fpllefia.com","imageURL":"https://github.com/yangshun.png","key":"endi"}],"frontMatter":{"slug":"long-blog-post","title":"Long Blog Post","authors":"endi","tags":["hello","docusaurus"]},"prevItem":{"title":"MDX Blog Post","permalink":"/vanillaPill/blog/mdx-blog-post"}},"content":"This is the summary of a very long blog post,\\r\\n\\r\\nUse a `\x3c!--` `truncate` `--\x3e` comment to limit blog post size in the list view.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\r\\n\\r\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\r\\n\\r\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\r\\n\\r\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\r\\n\\r\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\r\\n\\r\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\r\\n\\r\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\r\\n\\r\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\r\\n\\r\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\r\\n\\r\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\r\\n\\r\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\r\\n\\r\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\r\\n\\r\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\r\\n\\r\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\r\\n\\r\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\r\\n\\r\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet"}]}')}}]);