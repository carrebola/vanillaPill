"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7872],{3905:(e,a,r)=>{r.d(a,{Zo:()=>d,kt:()=>b});var t=r(7294);function n(e,a,r){return a in e?Object.defineProperty(e,a,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[a]=r,e}function s(e,a){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var a=1;a<arguments.length;a++){var r=null!=arguments[a]?arguments[a]:{};a%2?s(Object(r),!0).forEach((function(a){n(e,a,r[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(r,a))}))}return e}function l(e,a){if(null==e)return{};var r,t,n=function(e,a){if(null==e)return{};var r,t,n={},s=Object.keys(e);for(t=0;t<s.length;t++)r=s[t],a.indexOf(r)>=0||(n[r]=e[r]);return n}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)r=s[t],a.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var i=t.createContext({}),p=function(e){var a=t.useContext(i),r=a;return e&&(r="function"==typeof e?e(a):o(o({},a),e)),r},d=function(e){var a=p(e.components);return t.createElement(i.Provider,{value:a},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},m=t.forwardRef((function(e,a){var r=e.components,n=e.mdxType,s=e.originalType,i=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(r),m=n,b=u["".concat(i,".").concat(m)]||u[m]||c[m]||s;return r?t.createElement(b,o(o({ref:a},d),{},{components:r})):t.createElement(b,o({ref:a},d))}));function b(e,a){var r=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var s=r.length,o=new Array(s);o[0]=m;var l={};for(var i in a)hasOwnProperty.call(a,i)&&(l[i]=a[i]);l.originalType=e,l[u]="string"==typeof e?e:n,o[1]=l;for(var p=2;p<s;p++)o[p]=r[p];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},2359:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>i,contentTitle:()=>o,default:()=>c,frontMatter:()=>s,metadata:()=>l,toc:()=>p});var t=r(7462),n=(r(7294),r(3905));const s={sidebar_position:110},o="Historia 9. Definici\xf3n del mapping de acceso a la bd.",l={unversionedId:"h9",id:"h9",title:"Historia 9. Definici\xf3n del mapping de acceso a la bd.",description:'El t\xe9rmino "mapping" se refiere a la asignaci\xf3n de las propiedades de un objeto a las columnas de una tabla de una base de datos relacional. En este caso, la idea es que las propiedades de una clase JavaScript se correspondan con las columnas de una tabla en la base de datos Supabase.',source:"@site/docs/h9.md",sourceDirName:".",slug:"/h9",permalink:"/vanillaPill/docs/h9",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/h9.md",tags:[],version:"current",sidebarPosition:110,frontMatter:{sidebar_position:110},sidebar:"tutorialSidebar",previous:{title:"Historia 8. Configuraci\xf3n del entorno de desarrollo para nuestro proyecto. ESLint",permalink:"/vanillaPill/docs/h8"},next:{title:"Historia 10. Testing de las clases",permalink:"/vanillaPill/docs/h10"}},i={},p=[{value:"Conexi\xf3n con la base de datos",id:"conexi\xf3n-con-la-base-de-datos",level:2},{value:"Clase Perfil",id:"clase-perfil",level:2},{value:"Clase User",id:"clase-user",level:2},{value:"Clases Proyecto, Comentario, Nota, Trabajo y Trabajo_usuario",id:"clases-proyecto-comentario-nota-trabajo-y-trabajo_usuario",level:2}],d={toc:p},u="wrapper";function c(e){let{components:a,...r}=e;return(0,n.kt)(u,(0,t.Z)({},d,r,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"historia-9-definici\xf3n-del-mapping-de-acceso-a-la-bd"},"Historia 9. Definici\xf3n del mapping de acceso a la bd."),(0,n.kt)("p",null,'El t\xe9rmino "',(0,n.kt)("strong",{parentName:"p"},"mapping"),'" se refiere a la asignaci\xf3n de las propiedades de un objeto a las columnas de una tabla de una base de datos relacional. En este caso, la idea es que las propiedades de una clase JavaScript se correspondan con las columnas de una tabla en la base de datos Supabase.'),(0,n.kt)("p",null,"Para definir un mapping en una aplicaci\xf3n de JavaScript con Supabase, primero debes crear una ",(0,n.kt)("strong",{parentName:"p"},"clase")," JavaScript que represente un registro de la tabla en cuesti\xf3n. Cada ",(0,n.kt)("strong",{parentName:"p"},"propiedad")," de la clase se corresponder\xe1 con una ",(0,n.kt)("strong",{parentName:"p"},"columna")," en la tabla. Luego, puedes definir ",(0,n.kt)("strong",{parentName:"p"},"m\xe9todos")," est\xe1ticos en la clase para interactuar con la tabla (por ejemplo, leer, crear, actualizar o eliminar registros)."),(0,n.kt)("h2",{id:"conexi\xf3n-con-la-base-de-datos"},"Conexi\xf3n con la base de datos"),(0,n.kt)("p",null,"Para conectarnos con la base de datos crearemos un objeto supabase. Para ello:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Creamos el archivo supabase.js en la carpeta bd ",(0,n.kt)("inlineCode",{parentName:"li"},"src/bd/supabase.js")),(0,n.kt)("li",{parentName:"ul"},"El archivo definimos la conexi\xf3n usando los modelos de API Docs que ya testeamos en la historia 6, y la exportamos. El archivo quedar\xeda as\xed:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="supabase.js"',title:'"supabase.js"'},"import { createClient } from '@supabase/supabase-js'\n//Creando la conexi\xf3n con supabase\nconst supabaseUrl = 'https://ptnlczuiuaotrscavujw.supabase.co'\nconst supabaseKey = 'xxxxxx'\n\n//exportamos la conexi\xf3n\nexport const supabase = createClient(supabaseUrl, supabaseKey)\n\n")),(0,n.kt)("h2",{id:"clase-perfil"},"Clase Perfil"),(0,n.kt)("p",null,"Vamos a definir la clase ",(0,n.kt)("strong",{parentName:"p"},"Perfil")," que utilizaremos para interactuar con una tabla de base de datos llamada ",(0,n.kt)("strong",{parentName:"p"},"perfiles"),". "),(0,n.kt)("p",null,"Utilizaremos ",(0,n.kt)("strong",{parentName:"p"},"m\xe9todos static")," los cuales pueden ser llamados desde la misma clase, sin necesidad de instanciar un objeto."),(0,n.kt)("p",null,"La clase Perfil tienen las siguientes propiedades: id, nombre, apellidos, user_id, estado, rol y avatar y los siguientes m\xe9todos:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"constructor"),": El constructor de la clase acepta los par\xe1metros id, nombre, apellidos, user_id, estado, rol y avatar y los asigna a las propiedades correspondientes del objeto."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"getAll"),": Este m\xe9todo es ",(0,n.kt)("strong",{parentName:"li"},"static")," y devuelve una lista de todos los registros en la tabla perfiles.\nUtiliza el m\xe9todo ",(0,n.kt)("strong",{parentName:"li"},"select")," de la librer\xeda supabase para seleccionar todos los registros de la tabla perfiles. Luego, utiliza el m\xe9todo ",(0,n.kt)("strong",{parentName:"li"},"map")," para ",(0,n.kt)("strong",{parentName:"li"},"convertir cada registro en un objeto de la clase Perfil.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"getById"),": Este m\xe9todo es ",(0,n.kt)("strong",{parentName:"li"},"static")," y acepta un par\xe1metro id. Devuelve un objeto de la clase Perfil que tiene el id especificado.\nUtiliza el m\xe9todo ",(0,n.kt)("strong",{parentName:"li"},"select")," de la librer\xeda supabase para seleccionar el registro con el id especificado y el m\xe9todo ",(0,n.kt)("strong",{parentName:"li"},"single")," para devolver un solo registro. Luego, ",(0,n.kt)("strong",{parentName:"li"},"devuelve un objeto de la clase Perfil")," con los datos del registro seleccionado."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"create"),": Este m\xe9todo es ",(0,n.kt)("strong",{parentName:"li"},"static")," y acepta un objeto perfilData que contiene los datos para un nuevo registro de la tabla perfiles.\nUtiliza el m\xe9todo ",(0,n.kt)("strong",{parentName:"li"},"insert")," de la librer\xeda supabase para insertar el nuevo registro en la tabla perfiles."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"update"),": Este m\xe9todo actualiza el registro de la tabla perfiles que tiene el mismo id que el objeto Perfil actual.\nUtiliza el m\xe9todo ",(0,n.kt)("strong",{parentName:"li"},"update")," de la librer\xeda supabase para actualizar los campos nombre, apellidos y avatar del registro con los valores del objeto Perfil actual."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"delete"),": Este m\xe9todo es ",(0,n.kt)("strong",{parentName:"li"},"static")," y acepta un par\xe1metro id.\nElimina el registro de la tabla perfiles que tiene el id especificado utilizando el m\xe9todo delete de la librer\xeda supabase. Devuelve ",(0,n.kt)("strong",{parentName:"li"},"true")," si la eliminaci\xf3n es exitosa.")),(0,n.kt)("p",null,"En primer lugar imprtamos la conexi\xf3n de supabase ",(0,n.kt)("inlineCode",{parentName:"p"},'import { supabase } from "./supabase.js";\n'),"\nY definimos la clase que vamos a exportar. El c\xf3digo quedar\xeda as\xed:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="perfil.js"',title:'"perfil.js"'},"//Importamos la conexi\xf3n a la base de datos\nimport { supabase } from \"./supabase.js\";\nexport class Perfil {\n  // Mapping de propiedades de la tabla perfiles\n  constructor(id=null, created_at=null, nombre=null, apellidos=null, user_id=null, estado=null, rol=null, avatar=null) {\n    this.id = id\n    this.created_at = created_at\n    this.nombre = nombre\n    this.apellidos = apellidos\n    this.user_id = user_id\n    this.estado = estado\n    this.rol = rol\n    this.avatar = avatar\n  }\n\n  //leer todos\n  static async getAll() {\n    const { data: perfiles, error } = await supabase\n      .from('perfiles')\n      .select('*')\n    if (error) {\n      throw new Error(error.message)\n    }\n    //devuelve array de objetos \n    return perfiles.map(({ id, nombre, apellidos, user_id, estado, rol, avatar }) => {\n      return new Perfil(id, nombre, apellidos, user_id, estado, rol, avatar)\n    })\n  }\n\n  //leer registro por id (m\xe9todo static que se puede leer desde la clase sin necesidad de crear una instancia)\n  static async getById(id) {\n    const { data: perfil, error } = await supabase\n      .from('perfiles')\n      .select('*')\n      .eq('id', id)\n      .single()\n    if (error) {\n      throw new Error(error.message)\n    }\n    //Devuelve un nuevo objeto con los datos del registro\n    return new Perfil(perfil.id, perfil.nombre, perfil.apellidos, perfil.user_id, perfil.estado, perfil.rol, perfil.avatar)\n  }\n  \n  //crear registro (m\xe9todo static que se puede leer desde la clase sin necesidad de crear una instancia)\n  static async create(perfilData) {    \n    const { error } = await supabase\n      .from('perfiles')\n      .insert(perfilData)\n      .select()\n      //console.log('nuevo perfil ',error);\n    if (error) {\n      throw new Error(error.message)\n    }\n    return true\n  }\n\n  //actualizar\n  async update() {\n    const { error } = await supabase\n      .from('perfiles')\n      .update({\n        nombre: this.nombre,\n        apellidos: this.apellidos,\n        avatar: this.avatar\n      })\n      .eq('id', this.id)\n      .single()\n    if (error) {\n      throw new Error(error.message)\n    }\n    return true\n  }\n\n  //borrar\n  static async delete(id) {\n    const { error } = await supabase\n      .from('perfiles')\n      .delete()\n      .eq('id', id)\n    if (error) {\n      throw new Error(error.message)\n    }\n    return true\n  }\n}\n")),(0,n.kt)("h2",{id:"clase-user"},"Clase User"),(0,n.kt)("p",null,"Esta clase ser\xe1 diferente a la clase Perfil."),(0,n.kt)("p",null,"La clase User contiene tres m\xe9todos est\xe1ticos: ",(0,n.kt)("strong",{parentName:"p"},"create"),", ",(0,n.kt)("strong",{parentName:"p"},"login")," y ",(0,n.kt)("strong",{parentName:"p"},"logout"),", cada uno con una funcionalidad espec\xedfica relacionada con la autenticaci\xf3n y el manejo de users."),(0,n.kt)("p",null,"Primero importamos la conexi\xf3n a la base de datos a trav\xe9s de la biblioteca supabase.js."),(0,n.kt)("p",null,"Luego, en el constructor de la clase User definimos las propiedades de un usuario: ",(0,n.kt)("strong",{parentName:"p"},"id"),", ",(0,n.kt)("strong",{parentName:"p"},"email")," y ",(0,n.kt)("strong",{parentName:"p"},"password"),"."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"m\xe9todo create"),": Lo utilizaremos para crear un nuevo usuario en la base de datos.\nToma un objeto ",(0,n.kt)("strong",{parentName:"p"},"userData")," como argumento, que contiene las credenciales de usuario necesarias para crear un nuevo usuario en la base de datos.\nEl m\xe9todo utiliza la funci\xf3n ",(0,n.kt)("strong",{parentName:"p"},"supabase.auth.signUp")," para crear un nuevo usuario en la base de datos y ",(0,n.kt)("strong",{parentName:"p"},"devuelve un objeto User")," que contiene las propiedades id y email del nuevo usuario.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"M\xe9todo login"),":  Lo utilizamos para iniciar sesi\xf3n en la aplicaci\xf3n.\nToma un objeto userData que contiene las credenciales de inicio de sesi\xf3n y utiliza la funci\xf3n ",(0,n.kt)("strong",{parentName:"p"},"supabase.auth.signInWithPassword")," para iniciar sesi\xf3n en la base de datos.\n",(0,n.kt)("strong",{parentName:"p"},"Devuelve un objeto User")," que contiene las propiedades id y email del usuario que ha iniciado sesi\xf3n.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"M\xe9todo logout"),":  Lo utilizamos para cerrar sesi\xf3n en la aplicaci\xf3n.\nUtiliza la funci\xf3n ",(0,n.kt)("strong",{parentName:"p"},"supabase.auth.signOut")," para cerrar sesi\xf3n y ",(0,n.kt)("strong",{parentName:"p"},"devuelve true")," si se ha cerrado con exito."))),(0,n.kt)("h2",{id:"clases-proyecto-comentario-nota-trabajo-y-trabajo_usuario"},"Clases Proyecto, Comentario, Nota, Trabajo y Trabajo_usuario"),(0,n.kt)("p",null,"Para el resto de las clases seguiremos el mismo modelo que la clase Perfil"))}c.isMDXComponent=!0}}]);