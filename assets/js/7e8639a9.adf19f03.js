"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5128],{3905:(e,a,n)=>{n.d(a,{Zo:()=>u,kt:()=>g});var o=n(7294);function t(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function r(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);a&&(o=o.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?r(Object(n),!0).forEach((function(a){t(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function l(e,a){if(null==e)return{};var n,o,t=function(e,a){if(null==e)return{};var n,o,t={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],a.indexOf(n)>=0||(t[n]=e[n]);return t}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var i=o.createContext({}),p=function(e){var a=o.useContext(i),n=a;return e&&(n="function"==typeof e?e(a):s(s({},a),e)),n},u=function(e){var a=p(e.components);return o.createElement(i.Provider,{value:a},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var a=e.children;return o.createElement(o.Fragment,{},a)}},c=o.forwardRef((function(e,a){var n=e.components,t=e.mdxType,r=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(n),c=t,g=d["".concat(i,".").concat(c)]||d[c]||m[c]||r;return n?o.createElement(g,s(s({ref:a},u),{},{components:n})):o.createElement(g,s({ref:a},u))}));function g(e,a){var n=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var r=n.length,s=new Array(r);s[0]=c;var l={};for(var i in a)hasOwnProperty.call(a,i)&&(l[i]=a[i]);l.originalType=e,l[d]="string"==typeof e?e:t,s[1]=l;for(var p=2;p<r;p++)s[p]=n[p];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}c.displayName="MDXCreateElement"},5170:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>i,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var o=n(7462),t=(n(7294),n(3905));const r={sidebar_position:130},s="Historia 11. Primeros componentes vanillaJS: header y router",l={unversionedId:"h11",id:"h11",title:"Historia 11. Primeros componentes vanillaJS: header y router",description:"Antes de comenzar vamos a trabajar sobre una rama nueva que llamaremos vistas.",source:"@site/docs/h11.md",sourceDirName:".",slug:"/h11",permalink:"/vanillaPill/docs/h11",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/h11.md",tags:[],version:"current",sidebarPosition:130,frontMatter:{sidebar_position:130},sidebar:"tutorialSidebar",previous:{title:"Historia 10. Testing de las clases",permalink:"/vanillaPill/docs/h10"},next:{title:"Historia 12. Primeras vistas: Login, Registro, Administraci\xf3n de usuarios",permalink:"/vanillaPill/docs/h12"}},i={},p=[{value:"Componente Header",id:"componente-header",level:2},{value:"formEditarUsuario",id:"formeditarusuario",level:2},{value:"Componente Router",id:"componente-router",level:2},{value:"Versi\xf3n 2.0 de header",id:"versi\xf3n-20-de-header",level:2},{value:"Componente menuSuperior",id:"componente-menusuperior",level:2},{value:"Componente menuUsuario",id:"componente-menuusuario",level:2}],u={toc:p},d="wrapper";function m(e){let{components:a,...n}=e;return(0,t.kt)(d,(0,o.Z)({},u,n,{components:a,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"historia-11-primeros-componentes-vanillajs-header-y-router"},"Historia 11. Primeros componentes vanillaJS: header y router"),(0,t.kt)("p",null,"Antes de comenzar vamos a trabajar sobre una rama nueva que llamaremos ",(0,t.kt)("strong",{parentName:"p"},"vistas"),"."),(0,t.kt)("h2",{id:"componente-header"},"Componente Header"),(0,t.kt)("p",null,"Al principio del proyecto creamos un componente ",(0,t.kt)("strong",{parentName:"p"},"header")," b\xe1sico con la siguiente estructura:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="header.js"',title:'"header.js"'},"export const header = {\n  template: 'header',\n  script: ()=>{\n    console.log('header)\n  }\n}\n")),(0,t.kt)("p",null,"Vamos a actualizar la propiedad template de este componente con el c\xf3digo correspondiente al header de nuestro prototipo html. "),(0,t.kt)("p",null,"Este componente contendr\xe1 una barra de navegaci\xf3n b\xe1sica responsive basada en navbar de bootstrap. Tambi\xe9n tendremos un icono para acceder al men\xfa del usuario con las opciones:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"login/logout"),(0,t.kt)("li",{parentName:"ul"},"registro"),(0,t.kt)("li",{parentName:"ul"},"administraci\xf3n de usuarios")),(0,t.kt)("p",null,"M\xe1s adelante actualizaremos el header para adaptarlo a las nuevas funcionalidades."),(0,t.kt)("p",null,"Pero antes necesitamos crear la carpeta ",(0,t.kt)("inlineCode",{parentName:"p"},"src/assets")," para almacenar las imagenes del logotipo (",(0,t.kt)("strong",{parentName:"p"},"logo_vanilla.svg"),") y el avatar del usuario cuando la sesi\xf3n est\xe1 cerrada (",(0,t.kt)("strong",{parentName:"p"},"avatar.svg"),")."),(0,t.kt)("p",null,"Nuestro componente header quedar\xe1 as\xed:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="header.js"',title:'"header.js"'},'export const header = {\n  template: `\n  \n\x3c!-- Navbar  --\x3e\n<nav class="navbar navbar-expand-sm bg-light fixed-top">\n  <div class="container-fluid">\n    <a class="navbar-brand d-flex align-items-center" href="/">\n      <img\n        src="/assets/logo_vanilla.svg"\n        alt="Logo"\n        width="30"\n        height="30"\n        class="d-inline-block align-text-top me-2"\n      />\n      <span class=""></span>\n      Vanilla Games\n    </a>\n    \n    <button\n      class="navbar-toggler ms-auto\n      "\n      type="button"\n      data-bs-toggle="collapse"\n      data-bs-target="#navbarNavDropdown"\n      aria-controls="navbarNavDropdown"\n      aria-expanded="false"\n      aria-label="Toggle navigation"\n    >\n      <span class="navbar-toggler-icon"></span>\n    </button>\n    <div class="collapse navbar-collapse" id="navbarNavDropdown">   \n      <ul class="navbar-nav">   \n        <li class="nav-item">\n          <a class="nav-link" href="item1.html">Item 1</a>\n        </li>\n        <li class="nav-item">\n          <a class="nav-link" href="item2.html">Item 2</a>\n        </li>\n        <li><hr /></li>\n        \n        <li class="nav-item">\n          <a class="nav-link" href="item3.html">Item 3</a>\n        </li>\n        \n      </li>\n      </ul>\n      \n    </div>\n    \x3c!-- login --\x3e\n    <ul class="navbar nav me-5">\n      <li class="nav-item dropdown">\n        <a\n          class="nav-link dropdown-toggle"\n          href="#"\n          role="button"\n          data-bs-toggle="dropdown"\n          aria-expanded="false"\n        >\n          <div class="avatarLogin d-inline-block">\n            <img\n              src="/assets/avatar.svg"\n              alt="Logo"\n              width="30"\n              height="30"\n              class="d-inline-block align-text-top"\n            />\n          </div>\n        </a>\n        <ul class="dropdown-menu">\n          <li><a class="dropdown-item" href="login.html">Login</a></li>\n          <li>\n            <a class="dropdown-item" href="registro.html">Registrate</a>\n          </li>\n          <li>\n            <a\n              data-bs-toggle="modal"\n              data-bs-target="#editar"\n              class="dropdown-item"\n              href="editarPerfil.html"\n              >Editar perfil</a\n            >\n          </li>\n          <div class="dropdown-divider"></div>\n          <li>\n            <a class="dropdown-item" href="adminUsuarios.html">Admin Usuarios</a>\n          </li>\n        </ul>\n    </ul> \n  </div>\n</nav>\n')),(0,t.kt)("p",null,"Vamos a a\xf1adir ahora al header una ventana modal que nos permitir\xe1 editar el perfil del usuario logueado cuando hacemos click sobre la opci\xf3n de men\xfa correspondiente."),(0,t.kt)("p",null,"Para ello vamos a crear un componente ",(0,t.kt)("inlineCode",{parentName:"p"},"formEditarUsuario.js")),(0,t.kt)("h2",{id:"formeditarusuario"},"formEditarUsuario"),(0,t.kt)("p",null,"Este componente tendr\xe1 la misma estructura que el anterior, una propiedad template para el c\xf3digo html correspondiente al formulario, y un m\xe9todo script que incluir\xe1 toda la l\xf3gica (validaci\xf3n y conexi\xf3n con la base de datos), y que programaremos m\xe1s adelante."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="formEditarUsuario.js"',title:'"formEditarUsuario.js"'},'export const formEditarUsuario = {\n  template: `\n    \n\x3c!-- Modal --\x3e\n<div class="modal fade" id="editar">\n<div class="modal-dialog" role="document">\n    <div class="modal-content">\n    <div class="modal-header">\n        <h5 class="modal-title">Editar usuario</h5>\n        <button\n        type="button"\n        class="btn-close"\n        data-bs-dismiss="modal"\n        aria-label="Close"\n        >\n        <span aria-hidden="true"></span>\n        </button>\n    </div>\n    <div class="modal-body">\n        <form class="p-3">\n        <label class="mt-3 form-label" for="nick">Nombre: </label>\n        <input id="nombre" type="text" class="form-control" value="" />\n\n        <label class="mt-3 form-label" for="apellidos">Apellidos: </label>\n        <input id="apellidos" type="text" class="form-control" value="" />\n\n        <label class="mt-3 form-label" for="email">Email</label>\n        <input\n            id="email"\n            type="email"\n            class="form-control"\n            value="email@gmail.com"\n        />\n\n        <label class="mt-3 form-label" for="contrase\xf1a">Contrase\xf1a: </label>\n        <input id="contrase\xf1a" type="password" class="form-control" value="123456" />\n        </form>\n    </div>\n    <div class="modal-footer">\n        <button type="button" class="btn btn-primary">\n        Guardar cambios\n        </button>\n        <button\n        type="button"\n        class="btn btn-secondary"\n        data-bs-dismiss="modal"\n        >\n        Cerrar\n        </button>\n    </div>\n    </div>\n</div>\n</div>\n  `\n}\n')),(0,t.kt)("p",null,"Ahora solo falta inyectar este componente en el c\xf3digo html del componente header. Para ello importamos en ",(0,t.kt)("inlineCode",{parentName:"p"},"header.js"),"el componente con ",(0,t.kt)("inlineCode",{parentName:"p"},"import { formEditarUsuario } from './formEditarUsuario'")," "),(0,t.kt)("p",null,"y insertamos su template al final del c\xf3digo html de nuestro componente header: "),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="header.js"',title:'"header.js"'},"  ...\n\n    </div>\n  </nav>\n\n  //Modals\n  ${formEditarUsuario.template}\n`\n}\n")),(0,t.kt)("h2",{id:"componente-router"},"Componente Router"),(0,t.kt)("p",null,"Vamos a crear el c\xf3digo neceario para la implementaci\xf3n de un sistema de enrutamiento para una SPA (Single Page Application) en vanilla JavaScript."),(0,t.kt)("p",null,"En primer lugar vamos a definir un objeto llamado ",(0,t.kt)("inlineCode",{parentName:"p"},"enrutador"),". Este objeto tendr\xe1 como propiedad otro objeto llamado ",(0,t.kt)("inlineCode",{parentName:"p"},"rutas"),". Este objeto va a tener tantas propiedades como vistas contenga nuestro proyecto. Por lo tanto, conforme vayamos creando nuevas vistas las iremos a\xf1adiendo aqu\xed."),(0,t.kt)("p",null,"F\xedjate que cada propiedad terndr\xe1 como valor cada uno de los  componentes (vistas) de nuestro proyecto, es decir, objetos con la propiedad template y el m\xe9todo script() "),(0,t.kt)("p",null,"Por lo tanto, las vistas se importan din\xe1micamente usando el m\xe9todo import()."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="router.js"',title:'"router.js"'},"// Objeto con todas las rutas y su vista asociada\nrutas: {\n    home: import('../vistas/homeVista.js'),\n    // Usuarios\n    adminUsuarios: import('../vistas/admin/adminVista.js'),\n    registro: import('../vistas/registroVista.js'),\n    login: import('../vistas/loginVista.js'),\n    // Proyectos\n    proyectos: import('../vistas/proyectos/proyectosVista.js'),\n    nuevoProyecto: import('../vistas/proyectos/nuevoProyectoVista.js'),\n    editarProyecto: import('../vistas/proyectos/editarProyectoVista.js'),\n    detalleProyecto: import('../vistas/proyectos/detalleProyectoVista.js'),\n    misProyectos: import('../vistas/proyectos/misProyectosVista.js')\n  },\n")),(0,t.kt)("p",null,"Ahora vamos a crear el m\xe9todo ",(0,t.kt)("inlineCode",{parentName:"p"},"router"),". Esta ser\xe1 la que maneje el enrutamiento en la aplicaci\xf3n. "),(0,t.kt)("p",null,"Esta funci\xf3n se dispara cada vez que se produce un cambio en la url del navegador. "),(0,t.kt)("p",null,"Para navegar a trav\xe9s de las vistas sin tener que recargar la p\xe1gina utilizaremos el hash ",(0,t.kt)("inlineCode",{parentName:"p"},"#"),". Por ejemplo, para navegar a la p\xe1gina home la url ser\xeda ",(0,t.kt)("a",{parentName:"p",href:"http://www.mihost.com/#/home"},"www.mihost.com/#/home")),(0,t.kt)("p",null,"Dentro del m\xe9todo router() se obtiene el hash de la ruta modificada mediante ",(0,t.kt)("inlineCode",{parentName:"p"},"window.location.hash"),". "),(0,t.kt)("p",null,"Despu\xe9s, se utiliza este hash resultante para obtener la vista correspondiente del objeto rutas."),(0,t.kt)("p",null,"Si la vista existe, se obtiene el objeto de la vista mediante la propiedad ",(0,t.kt)("strong",{parentName:"p"},"default")," de la promesa. "),(0,t.kt)("p",null,"Luego, se inyecta la vista en el elemento main del documento HTML utilizando la propiedad ",(0,t.kt)("strong",{parentName:"p"},"innerHTML")," de document.querySelector('main'). Por \xfaltimo, se ejecuta el ",(0,t.kt)("strong",{parentName:"p"},"script")," de la vista si lo hay."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="router"',title:'"router"'},"// M\xe9todo que obtiene la ruta del navegador\n  router: async () => {\n    // Capturamos el hash # que ha cambiado en la url\n    const pathCompleto = window.location.hash\n    // Separamos la ruta del posible parametro que reciba\n    const path = pathCompleto.split('/')[1]\n    const parametro = pathCompleto.split('/')[2]\n\n    // capturamos el componente con ese nombre de la vista\n    // (Usamos las sintaxix objeto[propiedad]) porque el nombre de la propiedad lo tenemos en una variable.)\n    const componenteVista = await enrutador.rutas[path]\n    // Si existe la vista la podremos cargar\n    if (componenteVista) {\n      try {\n        // Obtenemos el objeto del componente (que fu\xe9 exportado como default)\n        const vista = await componenteVista.default\n        // inyectamos vista y ejecutamos su script\n        document.querySelector('main').innerHTML = vista.template\n        // A los script les pasamos el parametro que hemos extraido de la ruta. As\xed podemos pasar, por ejemplo, el id de un proyecto\n        vista.script(parametro)\n      } catch (error) {\n        // Si se produce un error cargamos la vista 404\n        console.log(error)\n      }\n    }\n  },\n")),(0,t.kt)("p",null,"La funci\xf3n ",(0,t.kt)("strong",{parentName:"p"},"observadorRutas")," es una funci\xf3n que se encarga de escuchar los eventos de enrutamiento en la aplicaci\xf3n. "),(0,t.kt)("p",null,"En esta funci\xf3n, se capturan los eventos de click en los enlaces, y se evita que se cargue la p\xe1gina utilizando el m\xe9todo preventDefault(). "),(0,t.kt)("p",null,"Luego, se obtiene la ruta del enlace utilizando el m\xe9todo ",(0,t.kt)("strong",{parentName:"p"},"getAttribute('href')"),". Se utiliza la funci\xf3n ",(0,t.kt)("strong",{parentName:"p"},"pushState()")," del objeto ",(0,t.kt)("strong",{parentName:"p"},"history")," para agregar la nueva ruta al historial del navegador sin recargar la p\xe1gina. "),(0,t.kt)("p",null,"Finalmente, se llama a la funci\xf3n ",(0,t.kt)("strong",{parentName:"p"},"router()")," para cargar la nueva vista correspondiente a la ruta."),(0,t.kt)("p",null,"Ahora necesitamos detectar que se ha producido un cambio en el historial de nuestro navegador. Para ello detectaremos el evento popstate del objeto window y llamaremos al m\xe9todo router() para actualizar la vista."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"  // Detectamos cuando alguien navega por el historial con los botones avanzar y retroceder del navegador.\n    window.addEventListener('popstate', (e) => {\n      console.log('evento popstate - Te est\xe1s moviendo por el historial')\n      enrutador.router()\n    })\n")),(0,t.kt)("p",null,"Para completar nuestro enrutador solo nos falta detectar cuando alguien hace click sobre un enlace (etiqueta ",(0,t.kt)("inlineCode",{parentName:"p"},'<a href="vista"></a>'),").\nPara ello, en nuestro m\xe9todo ",(0,t.kt)("inlineCode",{parentName:"p"},"observadorRutas()")," a\xf1adimos el observador\n",(0,t.kt)("inlineCode",{parentName:"p"},"document.body.addEventListener('click', event => { ")," "),(0,t.kt)("p",null,"A continuaci\xf3n comprobamos si el click se ha producido sobre un elemento de tipo ",(0,t.kt)("inlineCode",{parentName:"p"},"<a>"),". Si es as\xed, extraemos el contenido del atributo href y a\xf1adimos al historial de windows la nueva ruta. Ahora router() se encargar\xe1 de extraer de esta url la vista que debe cargarse y proceder\xe1 a inyectarla en nuestro ",(0,t.kt)("inlineCode",{parentName:"p"},"<main>")),(0,t.kt)("p",null,"Con esta l\xf3gica podemos detectar: "),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"cuando se pulsa sobre un enlace (etiqueta ",(0,t.kt)("inlineCode",{parentName:"li"},"<a>"),"), "),(0,t.kt)("li",{parentName:"ul"},"cuando se navega por el historial o "),(0,t.kt)("li",{parentName:"ul"},"cuando se introduce directamente una url en la barra de navegaci\xf3n\npara poder cargar la vista correspondiente")),(0,t.kt)("p",null,"El c\xf3digo completo quedar\xeda as\xed:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="router.js"',title:'"router.js"'},"    document.body.addEventListener('click', event => {\n")),(0,t.kt)("p",null,"Ahora solo faltar\xeda a\xf1adir a la p\xe1gina principal ",(0,t.kt)("inlineCode",{parentName:"p"},"main.js")," una llamada al m\xe9todo observadorRutas() de nuestro objeto para que escuche los posibles eventos."),(0,t.kt)("p",null,"Tambien vamos a eliminar la inyecci\xf3n manual que hac\xedamos sobre la etiqueta main para usar ",(0,t.kt)("inlineCode",{parentName:"p"},"windows.location = '#/home'")," y asociar as\xed la vista home a la raiz de la app."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="main.js"',title:'"main.js"'},"// Import our custom CSS\nimport './scss/styles.scss'\n// Import all of Bootstrap's JS\nimport * as bootstrap from 'bootstrap'\n\n// Importamos componentes header y footer\nimport { header } from './componentes/header'\nimport { footer } from './componentes/footer'\n\n// Importamos la Funci\xf3n para detectar eventos al cargar las vistas\nimport { enrutador } from './componentes/enrutador'\n\ndocument.querySelector('#header').innerHTML = header.template\nheader.script()\ndocument.querySelector('#footer').innerHTML = footer.template\n\nenrutador.observadorRutas()\n\n// Cargamos la p\xe1gina home\nwindow.location = '#/home'\n")),(0,t.kt)("h2",{id:"versi\xf3n-20-de-header"},"Versi\xf3n 2.0 de header"),(0,t.kt)("p",null,"Para mejorar nuestro header vamos a dividir el componente en tres componentes, el header que contendr\xe1 el html que no cambia nunca, y dos componentes m\xe1s: ",(0,t.kt)("strong",{parentName:"p"},"menuSuperior.js")," y ",(0,t.kt)("strong",{parentName:"p"},"menuUsuario.js"),". "),(0,t.kt)("p",null,"Estos componentes contendr\xe1n el c\xf3digo correspondiente a los men\xfas, que ser\xe1 diferente, dependiendo del usuario que est\xe9 logueado."),(0,t.kt)("p",null,"Tambi\xe9n vamos a a\xf1adir la l\xf3gica necesaria para detectar si hay una sesi\xf3n abierta y capturar los datos del usuario (su perfil)."),(0,t.kt)("p",null,"A continuaci\xf3n llamaremos a los m\xe9todos script de los men\xfas pasandoles el perfil del usuario logueado para que estos, dependiendo del rol del usuario, muestren los items correspondientes.\nEste es el c\xf3digo actualizado de header: "),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="header.js"',title:'"header.js"'},'import { formEditarPerfil } from \'./formEditarPerfil\'\nimport { User } from \'../bd/user\'\nimport { Perfil } from \'../bd/perfil\'\nimport { menuSuperior } from \'./menuSuperior\'\nimport { menuUsuario } from \'./menuUsuario\'\n\nexport const header = {\n  template: `\n  \n\x3c!-- Navbar  --\x3e\n<nav class="navbar navbar-expand-sm bg-light fixed-top">\n  <div class="container-fluid">\n    <a class="navbar-brand d-flex align-items-center" href="#/home">\n      <img\n        src="/assets/logo_vanilla.svg"\n        alt="Logo"\n        width="30"\n        height="30"\n        class="d-inline-block align-text-top me-2"\n      />\n      <span class=""></span>\n      Vanilla Games\n    </a>\n    \n    <button\n      class="navbar-toggler ms-auto\n      "\n      type="button"\n      data-bs-toggle="collapse"\n      data-bs-target="#navbarNavDropdown"\n      aria-controls="navbarNavDropdown"\n      aria-expanded="false"\n      aria-label="Toggle navigation"\n    >\n    <span class="navbar-toggler-icon"></span>\n    </button>\n    \x3c!-- Men\xfa superior --\x3e\n    ${menuSuperior.template}\n    \x3c!-- Menu usuario --\x3e\n    ${menuUsuario.template}\n  </div>\n</nav>\n\n//Modals\n${formEditarPerfil.template}\n  `,\n  script: async () => {\n    try {\n      // Capturamos los datos del usuario logueado\n      const usuarioLogueado = await User.getUser()\n      if (usuarioLogueado) {\n        const perfilLogueado = await Perfil.getByUserId(usuarioLogueado.id)\n        // cargamos el men\xfa superior y usuario para su rol\n        menuSuperior.script(perfilLogueado)\n        menuUsuario.script(perfilLogueado)\n      } else {\n        menuSuperior.script(\'anonimo\')\n        menuUsuario.script(\'anonimo\')\n      }\n    } catch (error) {\n      // alert(\'No he podido cargar el usuario logueado\')\n    }\n  }\n}\n')),(0,t.kt)("h2",{id:"componente-menusuperior"},"Componente menuSuperior"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="menuSuperior"',title:'"menuSuperior"'},'import { formEditarPerfil } from \'./formEditarPerfil\'\nimport { User } from \'../bd/user\'\nimport { Perfil } from \'../bd/perfil\'\nimport { menuSuperior } from \'./menuSuperior\'\nimport { menuUsuario } from \'./menuUsuario\'\n\nexport const header = {\n  template: `\n  \n\x3c!-- Navbar  --\x3e\n<nav class="navbar navbar-expand-sm bg-light fixed-top">\n  <div class="container-fluid">\n    <a class="navbar-brand d-flex align-items-center" href="#/home">\n      <img\n        src="/assets/logo_vanilla.svg"\n        alt="Logo"\n        width="30"\n        height="30"\n        class="d-inline-block align-text-top me-2"\n      />\n      <span class=""></span>\n      Vanilla Games\n    </a>\n    \n    <button\n      class="navbar-toggler ms-auto\n      "\n      type="button"\n      data-bs-toggle="collapse"\n      data-bs-target="#navbarNavDropdown"\n      aria-controls="navbarNavDropdown"\n      aria-expanded="false"\n      aria-label="Toggle navigation"\n    >\n    <span class="navbar-toggler-icon"></span>\n    </button>\n    \x3c!-- Men\xfa superior --\x3e\n    ${menuSuperior.template}\n    \x3c!-- Menu usuario --\x3e\n    ${menuUsuario.template}\n  </div>\n</nav>\n\n//Modals\n${formEditarPerfil.template}\n  `,\n  script: async () => {\n    try {\n      // Capturamos los datos del usuario logueado\n      const usuarioLogueado = await User.getUser()\n      if (usuarioLogueado) {\n        const perfilLogueado = await Perfil.getByUserId(usuarioLogueado.id)\n        // cargamos el men\xfa superior y usuario para su rol\n        menuSuperior.script(perfilLogueado)\n        menuUsuario.script(perfilLogueado)\n      } else {\n        menuSuperior.script(\'anonimo\')\n        menuUsuario.script(\'anonimo\')\n      }\n    } catch (error) {\n      // alert(\'No he podido cargar el usuario logueado\')\n    }\n  }\n}\n\n')),(0,t.kt)("h2",{id:"componente-menuusuario"},"Componente menuUsuario"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="menuUsuario.js"',title:'"menuUsuario.js"'},'import { formEditarPerfil } from \'./formEditarPerfil\'\nimport { User } from \'../bd/user\'\nimport { Perfil } from \'../bd/perfil\'\nimport { menuSuperior } from \'./menuSuperior\'\nimport { menuUsuario } from \'./menuUsuario\'\n\nexport const header = {\n  template: `\n  \n\x3c!-- Navbar  --\x3e\n<nav class="navbar navbar-expand-sm bg-light fixed-top">\n  <div class="container-fluid">\n    <a class="navbar-brand d-flex align-items-center" href="#/home">\n      <img\n        src="/assets/logo_vanilla.svg"\n        alt="Logo"\n        width="30"\n        height="30"\n        class="d-inline-block align-text-top me-2"\n      />\n      <span class=""></span>\n      Vanilla Games\n    </a>\n    \n    <button\n      class="navbar-toggler ms-auto\n      "\n      type="button"\n      data-bs-toggle="collapse"\n      data-bs-target="#navbarNavDropdown"\n      aria-controls="navbarNavDropdown"\n      aria-expanded="false"\n      aria-label="Toggle navigation"\n    >\n    <span class="navbar-toggler-icon"></span>\n    </button>\n    \x3c!-- Men\xfa superior --\x3e\n    ${menuSuperior.template}\n    \x3c!-- Menu usuario --\x3e\n    ${menuUsuario.template}\n  </div>\n</nav>\n\n//Modals\n${formEditarPerfil.template}\n  `,\n  script: async () => {\n    try {\n      // Capturamos los datos del usuario logueado\n      const usuarioLogueado = await User.getUser()\n      if (usuarioLogueado) {\n        const perfilLogueado = await Perfil.getByUserId(usuarioLogueado.id)\n        // cargamos el men\xfa superior y usuario para su rol\n        menuSuperior.script(perfilLogueado)\n        menuUsuario.script(perfilLogueado)\n      } else {\n        menuSuperior.script(\'anonimo\')\n        menuUsuario.script(\'anonimo\')\n      }\n    } catch (error) {\n      // alert(\'No he podido cargar el usuario logueado\')\n    }\n  }\n}\n\n')))}m.isMDXComponent=!0}}]);