"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5467],{3905:(e,a,n)=>{n.d(a,{Zo:()=>p,kt:()=>g});var r=n(7294);function o(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function t(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?t(Object(n),!0).forEach((function(a){o(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):t(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function i(e,a){if(null==e)return{};var n,r,o=function(e,a){if(null==e)return{};var n,r,o={},t=Object.keys(e);for(r=0;r<t.length;r++)n=t[r],a.indexOf(n)>=0||(o[n]=e[n]);return o}(e,a);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(r=0;r<t.length;r++)n=t[r],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var a=r.useContext(l),n=a;return e&&(n="function"==typeof e?e(a):s(s({},a),e)),n},p=function(e){var a=c(e.components);return r.createElement(l.Provider,{value:a},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},m=r.forwardRef((function(e,a){var n=e.components,o=e.mdxType,t=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(n),m=o,g=d["".concat(l,".").concat(m)]||d[m]||u[m]||t;return n?r.createElement(g,s(s({ref:a},p),{},{components:n})):r.createElement(g,s({ref:a},p))}));function g(e,a){var n=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var t=n.length,s=new Array(t);s[0]=m;var i={};for(var l in a)hasOwnProperty.call(a,l)&&(i[l]=a[l]);i.originalType=e,i[d]="string"==typeof e?e:o,s[1]=i;for(var c=2;c<t;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4956:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>t,metadata:()=>i,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const t={title:"Definici\xf3n del mapping de acceso a la bd. Clases"},s=void 0,i={unversionedId:"Version 1.0/SPRINT 4 - BACKEND/ORM para el mapping en javascript/Mapping y clases",id:"Version 1.0/SPRINT 4 - BACKEND/ORM para el mapping en javascript/Mapping y clases",title:"Definici\xf3n del mapping de acceso a la bd. Clases",description:"\xa1Comenzamos Sprint nuevo!",source:"@site/docs/03-Version 1.0/SPRINT 4 - BACKEND/07-ORM para el mapping en javascript/01-Mapping y clases.md",sourceDirName:"03-Version 1.0/SPRINT 4 - BACKEND/07-ORM para el mapping en javascript",slug:"/Version 1.0/SPRINT 4 - BACKEND/ORM para el mapping en javascript/Mapping y clases",permalink:"/vanillaPill/docs/Version 1.0/SPRINT 4 - BACKEND/ORM para el mapping en javascript/Mapping y clases",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/03-Version 1.0/SPRINT 4 - BACKEND/07-ORM para el mapping en javascript/01-Mapping y clases.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Definici\xf3n del mapping de acceso a la bd. Clases"},sidebar:"tutorialSidebar",previous:{title:"Pruebas de conexi\xf3n a la bd desde proyecto javascript",permalink:"/vanillaPill/docs/Version 1.0/SPRINT 4 - BACKEND/Probando Supabase con Javascript/Pruebas de conexi\xf3n"},next:{title:"Testing de las clases con Mocha y Chai",permalink:"/vanillaPill/docs/Version 1.0/SPRINT 4 - BACKEND/ORM para el mapping en javascript/Testing"}},l={},c=[{value:"Conexi\xf3n con la base de datos",id:"conexi\xf3n-con-la-base-de-datos",level:2},{value:"Clase Perfil",id:"clase-perfil",level:2},{value:"Clase User",id:"clase-user",level:2},{value:"Clase Proyecto",id:"clase-proyecto",level:2}],p={toc:c},d="wrapper";function u(e){let{components:a,...t}=e;return(0,o.kt)(d,(0,r.Z)({},p,t,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"\xa1Comenzamos Sprint nuevo!"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Alt text",src:n(1197).Z,width:"1250",height:"660"})),(0,o.kt)("h1",{id:"historia-definici\xf3n-del-mapping-de-acceso-a-la-bd-clases"},"Historia: Definici\xf3n del mapping de acceso a la bd. Clases"),(0,o.kt)("p",null,'El t\xe9rmino "',(0,o.kt)("strong",{parentName:"p"},"mapping"),'" se refiere a la asignaci\xf3n de las propiedades de un objeto a las columnas de una tabla de una base de datos relacional. En este caso, la idea es que las propiedades de una clase JavaScript se correspondan con las columnas de una tabla en la base de datos Supabase.'),(0,o.kt)("p",null,"Para definir un mapping en una aplicaci\xf3n de JavaScript con Supabase, primero debes crear una ",(0,o.kt)("strong",{parentName:"p"},"clase")," JavaScript que represente un registro de la tabla en cuesti\xf3n. Cada ",(0,o.kt)("strong",{parentName:"p"},"propiedad")," de la clase se corresponder\xe1 con una ",(0,o.kt)("strong",{parentName:"p"},"columna")," en la tabla. Luego, puedes definir ",(0,o.kt)("strong",{parentName:"p"},"m\xe9todos")," est\xe1ticos en la clase para interactuar con la tabla (por ejemplo, leer, crear, actualizar o eliminar registros)."),(0,o.kt)("h2",{id:"conexi\xf3n-con-la-base-de-datos"},"Conexi\xf3n con la base de datos"),(0,o.kt)("p",null,"Es el momento de comenzar a construir nuestro la l\xf3gica para la comunicaci\xf3n con la base de datos en nuestro proyecto."),(0,o.kt)("p",null,"Como siempre, antes de comenzar a trabajar crearemos una rama nueva. Llam\xe9mosla... 'ORM'"),(0,o.kt)("p",null,"Ahora instalamos en nuestro proyecto la librer\xeda de supabase para poder comenzar a trabajar con ella:"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"}," npm install --save @supabase/supabase-js")," "),(0,o.kt)("p",null,"Para conectarnos con la base de datos crearemos un objeto con la l\xf3gica de conexi\xf3n que nos ofrece supabase. Para ello:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Creamos el archivo ",(0,o.kt)("inlineCode",{parentName:"li"},"supabase.js")," en la carpeta bd ",(0,o.kt)("inlineCode",{parentName:"li"},"src/bd/supabase.js")),(0,o.kt)("li",{parentName:"ul"},"El archivo definimos la conexi\xf3n usando los modelos de API Docs que ya testeamos en el apartado 'Probando Supabase', y la exportamos. El archivo quedar\xeda as\xed:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="supabase.js"',title:'"supabase.js"'},"import { createClient } from '@supabase/supabase-js'\n//Creando la conexi\xf3n con supabase\nconst supabaseUrl = 'xxxxxx'\nconst supabaseKey = 'xxxxxx'\n\n//exportamos la conexi\xf3n\nexport const supabase = createClient(supabaseUrl, supabaseKey)\n\n")),(0,o.kt)("h2",{id:"clase-perfil"},"Clase Perfil"),(0,o.kt)("p",null,"Vamos a definir la clase ",(0,o.kt)("strong",{parentName:"p"},"Perfil")," que utilizaremos para interactuar con una tabla de base de datos llamada ",(0,o.kt)("strong",{parentName:"p"},"perfiles"),". "),(0,o.kt)("p",null,"Utilizaremos ",(0,o.kt)("strong",{parentName:"p"},"m\xe9todos static")," los cuales pueden ser llamados desde la misma clase, sin necesidad de instanciar un objeto."),(0,o.kt)("p",null,"La clase Perfil tienen las siguientes propiedades: id, nombre, apellidos, user_id, estado, rol y avatar y los siguientes m\xe9todos:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"constructor"),": El constructor de la clase acepta los par\xe1metros id, nombre, apellidos, user_id, estado, rol y avatar y los asigna a las propiedades correspondientes del objeto."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"getAll"),": Este m\xe9todo es ",(0,o.kt)("strong",{parentName:"li"},"static")," y devuelve una lista de todos los registros en la tabla perfiles.\nUtiliza el m\xe9todo ",(0,o.kt)("strong",{parentName:"li"},"select")," de la librer\xeda supabase para seleccionar todos los registros de la tabla perfiles. Luego, utiliza el m\xe9todo ",(0,o.kt)("strong",{parentName:"li"},"map")," para ",(0,o.kt)("strong",{parentName:"li"},"convertir cada registro en un objeto de la clase Perfil.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"getById"),": Este m\xe9todo es ",(0,o.kt)("strong",{parentName:"li"},"static")," y acepta un par\xe1metro id. Devuelve un objeto de la clase Perfil que tiene el id especificado.\nUtiliza el m\xe9todo ",(0,o.kt)("strong",{parentName:"li"},"select")," de la librer\xeda supabase para seleccionar el registro con el id especificado y el m\xe9todo ",(0,o.kt)("strong",{parentName:"li"},"single")," para devolver un solo registro. Luego, ",(0,o.kt)("strong",{parentName:"li"},"devuelve un objeto de la clase Perfil")," con los datos del registro seleccionado."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"getByUserId"),": Igual que el anterior pero m\xe1s \xfatil, ya que encuentra los datos de perfil a partir del ",(0,o.kt)("strong",{parentName:"li"},"id")," del ",(0,o.kt)("strong",{parentName:"li"},"user"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"create"),": Este m\xe9todo es ",(0,o.kt)("strong",{parentName:"li"},"static")," y acepta un objeto perfilData que contiene los datos para un nuevo registro de la tabla perfiles.\nUtiliza el m\xe9todo ",(0,o.kt)("strong",{parentName:"li"},"insert")," de la librer\xeda supabase para insertar el nuevo registro en la tabla perfiles."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"update"),": Este m\xe9todo actualiza el registro de la tabla perfiles que tiene el mismo id que el objeto Perfil actual.\nUtiliza el m\xe9todo ",(0,o.kt)("strong",{parentName:"li"},"update")," de la librer\xeda supabase para actualizar los campos nombre, apellidos y avatar del registro con los valores del objeto Perfil actual."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"delete"),": Este m\xe9todo es ",(0,o.kt)("strong",{parentName:"li"},"static")," y acepta un par\xe1metro id.\nElimina el registro de la tabla perfiles que tiene el id especificado utilizando el m\xe9todo delete de la librer\xeda supabase. Devuelve ",(0,o.kt)("strong",{parentName:"li"},"true")," si la eliminaci\xf3n es exitosa.")),(0,o.kt)("p",null,"En primer lugar creamos el archivo perfil.js dentro de la carpeta ",(0,o.kt)("inlineCode",{parentName:"p"},"bd"),". "),(0,o.kt)("p",null,"Ahora importamos la conexi\xf3n de supabase ",(0,o.kt)("inlineCode",{parentName:"p"},'import { supabase } from "./supabase.js";\n'),"\nY definimos la clase que vamos a exportar. El c\xf3digo quedar\xeda as\xed:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="perfil.js"',title:'"perfil.js"'},"\n// Importa el objeto 'supabase' desde un archivo 'supabase.js'\nimport { supabase } from './supabase.js'\n\n// Definici\xf3n de la clase Perfil\nexport class Perfil {\n  // Constructor que inicializa las propiedades del perfil\n  constructor({\n    id = null, // ID \xfanico del perfil\n    created_at = null, // Fecha de creaci\xf3n del perfil\n    user_id = null, // ID del usuario asociado al perfil\n    nombre = null, // Nombre del usuario\n    apellidos = null, // Apellidos del usuario\n    avatar = 'default_avatar.png', // URL del avatar por defecto\n    estado = 'activo', // Estado del perfil (activo/inactivo, por ejemplo)\n    rol = 'registrado' // Rol del usuario (registrado, administrador, etc.)\n  }) {\n    // Asignaci\xf3n de valores a las propiedades del perfil\n    this.id = id\n    this.created_at = created_at\n    this.user_id = user_id\n    this.nombre = nombre\n    this.apellidos = apellidos\n    this.avatar = avatar\n    this.estado = estado\n    this.rol = rol\n  }\n\n  // M\xe9todo est\xe1tico para obtener todos los perfiles\n  static async getAll() {\n    // Realiza una consulta a la base de datos para obtener todos los perfiles\n    const { data: perfiles, error } = await supabase\n      .from('perfiles')\n      .select('*') // Selecciona todas las columnas\n      .order('created_at', { ascending: false }) // Ordena por fecha de creaci\xf3n descendente\n\n    // Manejo de errores: lanza una excepci\xf3n si ocurre alg\xfan error\n    if (error) {\n      throw new Error(error.message)\n    }\n\n    // Mapea los perfiles obtenidos a instancias de la clase Perfil y los devuelve\n    return perfiles.map((perfil) => new Perfil(perfil))\n  }\n\n  // M\xe9todo est\xe1tico para obtener un perfil por su ID\n  static async getById(id) {\n    // Realiza una consulta para obtener un perfil por su ID\n    const { data: perfil, error } = await supabase\n      .from('perfiles')\n      .select('*')\n      .eq('id', id) // Filtra por el ID especificado\n\n    // Manejo de errores\n    if (error) {\n      throw new Error(error.message)\n    }\n\n    // Devuelve una instancia de Perfil con la informaci\xf3n obtenida\n    return new Perfil(perfil[0])\n  }\n\n  // M\xe9todo est\xe1tico para obtener un perfil por el ID del usuario asociado\n  static async getByUserId(userId) {\n    // Realiza una consulta para obtener un perfil por el ID de usuario asociado\n    const { data: perfil, error } = await supabase\n      .from('perfiles')\n      .select('*')\n      .eq('user_id', userId) // Filtra por el ID de usuario especificado\n\n    // Manejo de errores\n    if (error) {\n      throw new Error(error.message)\n    }\n\n    // Devuelve una instancia de Perfil con la informaci\xf3n obtenida\n    return new Perfil(perfil[0])\n  }\n\n  // M\xe9todo est\xe1tico para crear un nuevo perfil\n  static async create(perfilData) {\n    // Inserta un nuevo perfil en la base de datos con los datos proporcionados\n    const { data, error } = await supabase\n      .from('perfiles')\n      .insert(perfilData) // Inserta los datos del nuevo perfil\n      .select() // Devuelve los datos insertados\n\n    // Manejo de errores\n    if (error) {\n      throw new Error(`Error creando perfil: ${error.message}`)\n    }\n\n    // Si se insertaron datos, devuelve una nueva instancia de Perfil con los datos insertados\n    return data ? new Perfil(data[0]) : null\n  }\n\n  // M\xe9todo est\xe1tico para actualizar un perfil existente por su ID\n  static async update(id, newData) {\n    // Actualiza un perfil existente en la base de datos con los nuevos datos\n    const { error } = await supabase\n      .from('perfiles')\n      .update(newData) // Actualiza con los nuevos datos proporcionados\n      .eq('id', id) // Filtra por el ID del perfil a actualizar\n\n    // Manejo de errores\n    if (error) {\n      throw new Error(`Error actualizando perfil: ${error.message}`)\n    }\n\n    // Si la actualizaci\xf3n fue exitosa, devuelve true\n    return true\n  }\n}\n\n\n")),(0,o.kt)("h2",{id:"clase-user"},"Clase User"),(0,o.kt)("p",null,"Esta clase ser\xe1 diferente a la clase Perfil."),(0,o.kt)("p",null,"La clase User contiene tres m\xe9todos est\xe1ticos: ",(0,o.kt)("strong",{parentName:"p"},"create"),", ",(0,o.kt)("strong",{parentName:"p"},"login")," y ",(0,o.kt)("strong",{parentName:"p"},"logout"),", cada uno con una funcionalidad espec\xedfica relacionada con la autenticaci\xf3n y el manejo de users."),(0,o.kt)("p",null,"Primero importamos la conexi\xf3n a la base de datos a trav\xe9s de la biblioteca supabase.js."),(0,o.kt)("p",null,"Luego, en el constructor de la clase User definimos las propiedades de un usuario: ",(0,o.kt)("strong",{parentName:"p"},"id"),", ",(0,o.kt)("strong",{parentName:"p"},"email")," y ",(0,o.kt)("strong",{parentName:"p"},"password"),"."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"M\xe9todo create"),": Lo utilizaremos para crear un nuevo usuario en la base de datos.\nToma un objeto ",(0,o.kt)("strong",{parentName:"p"},"userData")," como argumento, que contiene las credenciales de usuario necesarias para crear un nuevo usuario en la base de datos.\nEl m\xe9todo utiliza la funci\xf3n ",(0,o.kt)("strong",{parentName:"p"},"supabase.auth.signUp")," para crear un nuevo usuario en la base de datos y ",(0,o.kt)("strong",{parentName:"p"},"devuelve un objeto User")," que contiene las propiedades id y email del nuevo usuario.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"M\xe9todo login"),":  Lo utilizamos para iniciar sesi\xf3n en la aplicaci\xf3n.\nToma un objeto userData que contiene las credenciales de inicio de sesi\xf3n y utiliza la funci\xf3n ",(0,o.kt)("strong",{parentName:"p"},"supabase.auth.signInWithPassword")," para iniciar sesi\xf3n en la base de datos.\n",(0,o.kt)("strong",{parentName:"p"},"Devuelve un objeto User")," que contiene las propiedades id y email del usuario que ha iniciado sesi\xf3n.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"M\xe9todo logout"),":  Lo utilizamos para cerrar sesi\xf3n en la aplicaci\xf3n.\nUtiliza la funci\xf3n ",(0,o.kt)("strong",{parentName:"p"},"supabase.auth.signOut")," para cerrar sesi\xf3n y ",(0,o.kt)("strong",{parentName:"p"},"devuelve true")," si se ha cerrado con \xe9xito.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"M\xe9todo ",(0,o.kt)("strong",{parentName:"p"},"getUser"),":  Lo utilizamos para capturar los datos del usuario logueado.\nUtiliza la funci\xf3n ",(0,o.kt)("strong",{parentName:"p"},"supabase.auth.getUser")," para acceder a la sesi\xf3n y ",(0,o.kt)("strong",{parentName:"p"},"devuelve un objeto con el id y el email del usuario"),"."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="user.js"',title:'"user.js"'},"// Importamos la conexi\xf3n a la base de datos desde './supabase.js'\nimport { supabase } from './supabase.js'\n\n// Definici\xf3n de la clase User\nexport class User {\n  // Constructor que asigna propiedades b\xe1sicas de un usuario\n  constructor(id = null, email = null, password = null) {\n    this.id = id\n    this.email = email\n    this.password = password\n  }\n\n  // M\xe9todo est\xe1tico para crear un nuevo usuario (registro)\n  static async create(userData) {\n    // Registra un nuevo usuario con Supabase\n    const { data, error } = await supabase.auth.signUp(userData)\n\n    // Manejo de errores\n    if (error) {\n      throw new Error(error.message)\n    }\n\n    // Si el usuario se crea correctamente, devuelve una instancia de User con el ID y el email\n    console.log('usuario creado correctamente ', data)\n    return new User(data.user.id, data.user.email)\n  }\n\n  // M\xe9todo est\xe1tico para iniciar sesi\xf3n (recibe un objeto con email y password)\n  static async login(userData) {\n    // Inicia sesi\xf3n con Supabase\n    const { data, error } = await supabase.auth.signInWithPassword(userData)\n\n    // Manejo de errores\n    if (error) {\n      throw new Error(error.message)\n    }\n\n    // Devuelve una instancia de User con el ID y el email del usuario logueado\n    return new User(data.user.id, data.user.email)\n  }\n\n  // M\xe9todo est\xe1tico para cerrar sesi\xf3n\n  static async logout() {\n    // Cierra sesi\xf3n con Supabase\n    const { error } = await supabase.auth.signOut()\n\n    // Manejo de errores\n    if (error) {\n      throw new Error(error.message)\n    }\n\n    // Retorna true si el cierre de sesi\xf3n fue exitoso\n    return true\n  }\n\n  // M\xe9todo est\xe1tico para obtener el usuario actualmente logueado\n  static async getUser() {\n    // Obtiene la informaci\xf3n del usuario actualmente logueado con Supabase\n    const { data: { user } } = await supabase.auth.getUser()\n\n    // Si hay un usuario logueado, devuelve una instancia de User con su ID y email\n    if (user) return new User(user.id, user.email)\n  }\n\n  // M\xe9todo para actualizar datos del usuario (no est\xe1 claro c\xf3mo se utiliza actualmente)\n  async update(nuevosDatos) {\n    const { data, error } = await supabase.auth.updateUser({\n      email: this.email,\n      password: this.password\n    })\n\n    if (error) {\n      throw new Error(error.message)\n    }\n  }\n}\n\n")),(0,o.kt)("h2",{id:"clase-proyecto"},"Clase Proyecto"),(0,o.kt)("p",null,"La clase ",(0,o.kt)("strong",{parentName:"p"},"proyecto")," es muy parecida a la clase perfil, por lo que partiremos del mismo archivo y lo modificaremos para adaptarlo a los campos de la ",(0,o.kt)("strong",{parentName:"p"},"tabla proyecto"),"."),(0,o.kt)("admonition",{title:": \u270f Tarea",type:"danger"},(0,o.kt)("p",{parentName:"admonition"},"Crea el archivo proyecto.js con la clase correspondiente")),(0,o.kt)("div",{style:{display:"none"}},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="proyecto.js"',title:'"proyecto.js"'},"\n// Importa el objeto 'supabase' desde un archivo 'supabase.js'\nimport { supabase } from './supabase.js'\n\n// Definici\xf3n de la clase Proyecto\nexport class Proyecto {\n  // Constructor que inicializa las propiedades del proyecto\n  constructor({\n    id = null, // ID \xfanico del proyecto\n    created_at = null, // Fecha de publicaci\xf3n del proyecto\n    user_id = null, // ID del usuario que ha creado el proyecto\n    nombre = null, // Nombre del proyecto\n    descripcion = null, // Descripcion del proyecto\n    imagen = 'default_image.png', // imagen por defecto\n    enlace = null, // Enlace al proyecto publicado\n    repositorio = null, // Enlace al repositorio\n    estado = 'activo' // Estado del proyecto (activo/inactivo, por ejemplo)\n  }) {\n    // Asignaci\xf3n de valores a las propiedades del proyecto\n    this.id = id\n    this.created_at = created_at\n    this.user_id = user_id\n    this.nombre = nombre\n    this.descripcion = descripcion\n    this.imagen = imagen\n    this.enlace = enlace\n    this.repositorio = repositorio\n    this.estado = estado\n  }\n\n  // M\xe9todo est\xe1tico para obtener todos los proyectos\n  static async getAll() {\n    // Realiza una consulta a la base de datos para obtener todos los proyectos\n    const { data: proyectos, error } = await supabase\n      .from('proyectos')\n      .select('*') // Selecciona todas las columnas\n      .order('created_at', { ascending: false }) // Ordena por fecha de creaci\xf3n descendente\n\n    // Manejo de errores: lanza una excepci\xf3n si ocurre alg\xfan error\n    if (error) {\n      throw new Error(error.message)\n    }\n\n    // Mapea los proyectos obtenidos a instancias de la clase Proyecto y los devuelve\n    return proyectos.map((Proyecto) => new Proyecto(Proyecto))\n  }\n\n  // M\xe9todo est\xe1tico para obtener un Proyecto por su ID\n  static async getById(id) {\n    // Realiza una consulta para obtener un Proyecto por su ID\n    const { data: Proyecto, error } = await supabase\n      .from('proyectos')\n      .select('*')\n      .eq('id', id) // Filtra por el ID especificado\n      .single() // Espera un solo resultado\n\n    // Manejo de errores\n    if (error) {\n      throw new Error(error.message)\n    }\n\n    // Devuelve una instancia de Proyecto con la informaci\xf3n obtenida\n    return new Proyecto(Proyecto)\n  }\n\n  // M\xe9todo est\xe1tico para obtener un Proyecto por el ID del usuario asociado\n  static async getByUserId(id) {\n    // Realiza una consulta para obtener un Proyecto por el ID de usuario asociado\n    const { data: Proyecto, error } = await supabase\n      .from('proyectos')\n      .select('*')\n      .eq('user_id', id) // Filtra por el ID de usuario especificado\n      .single()\n\n    // Manejo de errores\n    if (error) {\n      throw new Error(error.message)\n    }\n\n    // Devuelve una instancia de Proyecto con la informaci\xf3n obtenida\n    return new Proyecto(Proyecto)\n  }\n\n  // M\xe9todo est\xe1tico para crear un nuevo Proyecto\n  static async create(ProyectoData) {\n    // Inserta un nuevo Proyecto en la base de datos con los datos proporcionados\n    const { data, error } = await supabase\n      .from('proyectos')\n      .insert(ProyectoData) // Inserta los datos del nuevo Proyecto\n      .select() // Devuelve los datos insertados\n\n    // Manejo de errores\n    if (error) {\n      throw new Error(`Error creando Proyecto: ${error.message}`)\n    }\n\n    // Si se insertaron datos, devuelve una nueva instancia de Proyecto con los datos insertados\n    return data ? new Proyecto(data[0]) : null\n  }\n\n  // M\xe9todo est\xe1tico para actualizar un Proyecto existente por su ID\n  static async update(id, newData) {\n    // Actualiza un Proyecto existente en la base de datos con los nuevos datos\n    const { error } = await supabase\n      .from('proyectos')\n      .update(newData) // Actualiza con los nuevos datos proporcionados\n      .eq('id', id) // Filtra por el ID del Proyecto a actualizar\n\n    // Manejo de errores\n    if (error) {\n      throw new Error(`Error actualizando Proyecto: ${error.message}`)\n    }\n\n    // Si la actualizaci\xf3n fue exitosa, devuelve true\n    return true\n  }\n}\n\n\n"))))}u.isMDXComponent=!0},1197:(e,a,n)=>{n.d(a,{Z:()=>r});const r=n.p+"assets/images/image-7-265d30d527a1fd6cd361374d5ae480af.png"}}]);