"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2955],{3905:(e,a,t)=>{t.d(a,{Zo:()=>m,kt:()=>v});var n=t(7294);function o(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach((function(a){o(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,n,o=function(e,a){if(null==e)return{};var t,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||(o[t]=e[t]);return o}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=n.createContext({}),p=function(e){var a=n.useContext(l),t=a;return e&&(t="function"==typeof e?e(a):s(s({},a),e)),t},m=function(e){var a=p(e.components);return n.createElement(l.Provider,{value:a},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},d=n.forwardRef((function(e,a){var t=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=p(t),d=o,v=u["".concat(l,".").concat(d)]||u[d]||c[d]||r;return t?n.createElement(v,s(s({ref:a},m),{},{components:t})):n.createElement(v,s({ref:a},m))}));function v(e,a){var t=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var r=t.length,s=new Array(r);s[0]=d;var i={};for(var l in a)hasOwnProperty.call(a,l)&&(i[l]=a[l]);i.originalType=e,i[u]="string"==typeof e?e:o,s[1]=i;for(var p=2;p<r;p++)s[p]=t[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},6811:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var n=t(7462),o=(t(7294),t(3905));const r={title:"Componente enrutador.js"},s=void 0,i={unversionedId:"Version 1.0/SPRINT 3 - SPA/Enrutador",id:"Version 1.0/SPRINT 3 - SPA/Enrutador",title:"Componente enrutador.js",description:"Por el momento tenemos los componentes header.js y footer.js cargados sobre sus etiquetas respectivas.",source:"@site/docs/03-Version 1.0/SPRINT 3 - SPA/04-Enrutador.md",sourceDirName:"03-Version 1.0/SPRINT 3 - SPA",slug:"/Version 1.0/SPRINT 3 - SPA/Enrutador",permalink:"/vanillaPill/docs/Version 1.0/SPRINT 3 - SPA/Enrutador",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/03-Version 1.0/SPRINT 3 - SPA/04-Enrutador.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Componente enrutador.js"},sidebar:"tutorialSidebar",previous:{title:"Componentes y vistas",permalink:"/vanillaPill/docs/Version 1.0/SPRINT 3 - SPA/Componentes y vistas"},next:{title:"Subcomponentes de header (Men\xfas y editar perfil)",permalink:"/vanillaPill/docs/Version 1.0/SPRINT 3 - SPA/Componente menu"}},l={},p=[{value:"C\xf3mo funciona nuestro enrutador",id:"c\xf3mo-funciona-nuestro-enrutador",level:2},{value:"Componente <strong>enrutador.js</strong>",id:"componente-enrutadorjs",level:2},{value:"M\xe9todo observadorRutas()",id:"m\xe9todo-observadorrutas",level:3},{value:"M\xe9todo router()",id:"m\xe9todo-router",level:3}],m={toc:p},u="wrapper";function c(e){let{components:a,...t}=e;return(0,o.kt)(u,(0,n.Z)({},m,t,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Por el momento tenemos los componentes header.js y footer.js cargados sobre sus etiquetas respectivas."),(0,o.kt)("p",null,"Por otro lado tenemos una serie de ",(0,o.kt)("strong",{parentName:"p"},"vistas")," que inyectamos en la etiqueta ",(0,o.kt)("inlineCode",{parentName:"p"},"<main></main>"),"."),(0,o.kt)("p",null,"Vamos a programar la l\xf3gica necesaria para que ",(0,o.kt)("strong",{parentName:"p"},"podamos cargar las vistas desde nuestro navegador, como si de p\xe1ginas html independientes se tratase.")),(0,o.kt)("p",null,"Para ello programaremos un componente que llamaremos ",(0,o.kt)("inlineCode",{parentName:"p"},"enrutador.js")),(0,o.kt)("h2",{id:"c\xf3mo-funciona-nuestro-enrutador"},"C\xf3mo funciona nuestro enrutador"),(0,o.kt)("p",null,"En realidad, la funci\xf3n de este componente es inyectar el template de las las vistas en la etiqueta main y cargar sus scripts. As\xed que la primera pregunta que debemos hacernos es: \xbfCuando debe hacerlo? "),(0,o.kt)("p",null,"Se me ocurren tres posibles casos:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Cuando alguien escribe la ruta en el navegador"),(0,o.kt)("li",{parentName:"ol"},"Cuando alguien navega por el historial (adelante o atr\xe1s)"),(0,o.kt)("li",{parentName:"ol"},"Cuando alguien hace click sobre un enlace.")),(0,o.kt)("p",null,"As\xed que de momento vamos a necesitar una funci\xf3n (m\xe1s bien un m\xe9todo) que escuche estos eventos. Lo llamaremos: ",(0,o.kt)("strong",{parentName:"p"},"observadorRutas()")),(0,o.kt)("p",null,"Por otro lado, necesitamos un m\xe9todo que se encargue de inyectar el template de las las vistas en la etiqueta main y cargar sus scripts. A esta funci\xf3n la vamos a llamar: ",(0,o.kt)("strong",{parentName:"p"},"router()")),(0,o.kt)("p",null,"Y finalmente, necesitamos un objeto donde poner el nombre de todas las posibles vistas. Para ello crearemos una propiedad que, sorpresa, llamaremos: ",(0,o.kt)("em",{parentName:"p"},"rutas")," "),(0,o.kt)("h2",{id:"componente-enrutadorjs"},"Componente ",(0,o.kt)("strong",{parentName:"h2"},"enrutador.js")),(0,o.kt)("p",null,"Antes de comenzar trabajar, vamos a crear una nueva rama a partir de la rama ",(0,o.kt)("inlineCode",{parentName:"p"},"main"),". Llam\xe9mosla ",(0,o.kt)("inlineCode",{parentName:"p"},"Enrutador")," (Que original... \ud83d\ude12)"),(0,o.kt)("p",null,"Ahora s\xed. Creamos el archivo ",(0,o.kt)("inlineCode",{parentName:"p"},"enrutador.js")," dentro de la carpeta ",(0,o.kt)("inlineCode",{parentName:"p"},"componentes")," y programamos la estructura b\xe1sica a partir de las premisas explicadas. Quedar\xeda algo as\xed:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="enrutador.js"',title:'"enrutador.js"'},"\nexport const enrutador = {\n  rutas: {},\n  router: () => {},\n  observadorRutas: () => {}\n}\n\n\n")),(0,o.kt)("p",null,"Ahora vamos a actualizar el objeto rutas con las vistas importadas. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="enrutador.js"',title:'"enrutador.js"'},"export const enrutador = {\n  rutas: {\n    home: import('../vistas/homeVista.js'),\n    // Usuarios\n    admin: import('../vistas/adminVista.js'),\n    registro: import('../vistas/registroVista.js'),\n    login: import('../vistas/loginVista.js'),\n    // Proyectos\n    proyectos: import('../vistas/proyectosVista.js'),\n    proyectoNuevo: import('../vistas/proyectoNuevoVista.js'),\n    proyectoEditar: import('../vistas/proyectoEditarVista.js'),\n    proyectoDetalle: import('../vistas/proyectoDetalleVista.js'),\n    404: import('../vistas/404.js')\n  },\n  router: () => {},\n  observadorRutas: () => {}\n}\n")),(0,o.kt)("admonition",{title:"Recuerda",type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Cuando creemos una vista nueva en nuestro proyecto debemos venir a este archivo y actualizar esta propiedad")),(0,o.kt)("h3",{id:"m\xe9todo-observadorrutas"},"M\xe9todo observadorRutas()"),(0,o.kt)("p",null,"Nuestro sistema de navegaci\xf3n se basar\xe1 en modificar la url utilizando el s\xedmbolo ",(0,o.kt)("strong",{parentName:"p"},"#"),". As\xed, cuando queramos navegar a la vista ",(0,o.kt)("strong",{parentName:"p"},"proyectos")," utilizaremos la url ",(0,o.kt)("inlineCode",{parentName:"p"},"www.miproyecto/#/proyectos"),". En realidad no cargaremos nuevas p\xe1ginas, sino que actualizaremos el contenido de la etiqueta ",(0,o.kt)("inlineCode",{parentName:"p"},"<main>"),". "),(0,o.kt)("p",null,"Nuestro sistema de navegaci\xf3n se basar\xe1 en la siguiente metodolog\xeda:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Lanzaremos el m\xe9todo observadorRutas()en el archivo ",(0,o.kt)("inlineCode",{parentName:"li"},"main.js")," para que se ejecute nada m\xe1s cargar la app y comience escuchar los posibles eventos en el navegador.:"),(0,o.kt)("li",{parentName:"ol"},"Para detectar si alguien ha hecho clic en un enlace , ",(0,o.kt)("strong",{parentName:"li"},"detectaremos el evento click")," en el cuerpo del documento (en el ",(0,o.kt)("inlineCode",{parentName:"li"},"<body>"),") usando  ",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// Capturamos los eventos click sobre el body\ndocument.body.addEventListener('click', (event)=>{...})\n"))),(0,o.kt)("li",{parentName:"ol"},"Obtendremos el elemento sobre el que se ha hecho click y comprobaremos que se trata de un elemento con la clase '",(0,o.kt)("strong",{parentName:"li"},"router-link"),"'",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-js"},"document.body.addEventListener('click', event => {\n  // Evitamos que se cargue la p\xe1gina\n  const link = event.target\n  if (link.classList.contains('router-link')) {\n    console.log('router-link')\n    event.preventDefault()\n    ...\n"))),(0,o.kt)("li",{parentName:"ol"},"Extraeremos el contenido del atributo ",(0,o.kt)("strong",{parentName:"li"},"href")," (el cual contendr\xe1 el nombre de la vista a cargar)",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// Leemos el contenido del href\nconst href = link.getAttribute('href') \n"))),(0,o.kt)("li",{parentName:"ol"},"Y actualizaremos la barra de navegaci\xf3n del navegador incluyendo la url en el historial de navegaci\xf3n",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// Actualizamos url del navegador\nwindow.history.pushState({ path: href }, '', href)\n"))),(0,o.kt)("li",{parentName:"ol"},"Por otro lado vamos a ",(0,o.kt)("strong",{parentName:"li"},"escuchar el evento ",(0,o.kt)("em",{parentName:"strong"},"cambio en la barra de navegaci\xf3n")," ",(0,o.kt)("inlineCode",{parentName:"strong"},"popstate")),". Cuando detectemos un cambio llamaremos al m\xe9todo ",(0,o.kt)("strong",{parentName:"li"},"router()")," para actualizar la vista:",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// Capturamos eventos pushState (cambios en la url del navegador)\nwindow.addEventListener('popstate', (e) => {\n  // Llamamos a router para que cargue la vista\n  enrutador.router()\n}) \n")))),(0,o.kt)("p",null,"El m\xe9todo ",(0,o.kt)("strong",{parentName:"p"},"observadorRutas()")," quedar\xeda as\xed:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="enrutador.js"',title:'"enrutador.js"'},"observadorRutas: () => {\n    document.body.addEventListener('click', event => {\n      // Evitamos que se cargue la p\xe1gina\n      const link = event.target\n      if (link.classList.contains('router-link')) {\n        console.log('router-link')\n        event.preventDefault()\n        // Obtenemos la ruta del enlace sin el .html\n        const href = link.getAttribute('href')\n        // A\xf1adimos la nueva ruta al historial\n\n        // (El m\xe9todo pushState() permite agregar un nuevo estado a la pila del historial del navegador. Esto significa que una nueva entrada de historial se agrega a la pila y la URL del navegador se actualiza sin recargar la p\xe1gina.)\n        window.history.pushState({ path: href }, '', href)\n        // y ejecutamos el router de nuevo para que detecte los cambios con el evento popstate\n        enrutador.router()\n      }\n    })\n\n    // Detectamos cuando alguien navega por el historial con los botones avanzar y retroceder del navegador.\n    window.addEventListener('popstate', (e) => {\n      console.log('evento popstate - Te est\xe1s moviendo por el historial')\n      enrutador.router()\n    })\n  }\n\n")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"  ",(0,o.kt)("em",{parentName:"p"},"(El m\xe9todo ",(0,o.kt)("strong",{parentName:"em"},"pushState()")," permite agregar un nuevo estado a la pila del historial del navegador. Esto significa que una nueva entrada de historial se agrega a la pila y la URL del navegador se actualiza sin recargar la p\xe1gina.)"))),(0,o.kt)("h3",{id:"m\xe9todo-router"},"M\xe9todo router()"),(0,o.kt)("p",null,"Ahora vamos a crear el m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"router()"),". Este ser\xe1 el que cargue las vistas en la app. "),(0,o.kt)("p",null,"Esta funci\xf3n se dispara cada vez que se produce un cambio en la url del navegador.\nDentro del m\xe9todo ",(0,o.kt)("strong",{parentName:"p"},"router()")," se obtiene el ",(0,o.kt)("strong",{parentName:"p"},"hash")," de la ruta modificada mediante ",(0,o.kt)("inlineCode",{parentName:"p"},"window.location.hash"),".\nDespu\xe9s, se utiliza este hash resultante para obtener la vista correspondiente del objeto rutas."),(0,o.kt)("admonition",{title:"Nota",type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Tambi\xe9n hemos contemplado la posibilidad de pasar un par\xe1metro en la ruta. Por ejemplo, para la vista ",(0,o.kt)("strong",{parentName:"p"},"proyectos")," la ruta ser\xeda: ",(0,o.kt)("inlineCode",{parentName:"p"},"http://miservidor.com/#/proyectos"),". Pero si queremos editar un proyecto determinado necesitamos a\xf1adir a la ruta el id del proyecto. Por ejemplo, para editar el proyecto con id=23 la ruta ser\xeda: ",(0,o.kt)("inlineCode",{parentName:"p"},"http://miservidor.com/#/editarProyecto/23"),".")),(0,o.kt)("p",null,"Con esta l\xf3gica podemos detectar: "),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"cuando se navega por el historial o "),(0,o.kt)("li",{parentName:"ul"},"cuando se introduce directamente una url en la barra de navegaci\xf3n para poder cargar la vista correspondiente")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"    // Capturamos el hash # que ha cambiado en la url\n    const pathCompleto = window.location.hash\n    // Separamos la ruta del posible parametro que reciba\n    const path = pathCompleto.split('/')[1]\n    const parametro = pathCompleto.split('/')[2]\n")),(0,o.kt)("p",null,"Si la vista no existe cargaremos la vista ",(0,o.kt)("inlineCode",{parentName:"p"},"404.js")," para indicar que la p\xe1gina no existe."),(0,o.kt)("p",null,"Si la vista existe, se obtiene el objeto de la vista mediante la propiedad ",(0,o.kt)("strong",{parentName:"p"},"default")," de la promesa. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"    const componenteVista = await enrutador.rutas[path]\n")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"  ",(0,o.kt)("em",{parentName:"p"},"(Fijate que para acceder a una propiedad del objeto ",(0,o.kt)("strong",{parentName:"em"},"rutas")," no usamos el punto sino los corchetes ",(0,o.kt)("strong",{parentName:"em"},"["),"path",(0,o.kt)("strong",{parentName:"em"},"]"),". De esta manera podemos ",(0,o.kt)("strong",{parentName:"em"},"acceder a una propiedad utilizando una variable")," que contiene el nombre de la propiedad, en lugar del propio nombre de la propiedad)"))),(0,o.kt)("p",null,"Luego, se inyecta la vista en el elemento main del documento HTML utilizando la propiedad ",(0,o.kt)("strong",{parentName:"p"},"innerHTML")," de document.querySelector('main'). Por \xfaltimo, se ejecuta el ",(0,o.kt)("strong",{parentName:"p"},"script")," de la vista si lo hay."),(0,o.kt)("p",null,"As\xed quedar\xeda el m\xe9todo router: "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="router"',title:'"router"'},"// M\xe9todo que obtiene la ruta del navegador\n  router: async () => {\n    // Capturamos el hash # que ha cambiado en la url\n    const pathCompleto = window.location.hash\n    // Separamos la ruta del posible parametro que reciba\n    const path = pathCompleto.split('/')[1]\n    const parametro = pathCompleto.split('/')[2]\n\n    // capturamos el componente con ese nombre de la vista\n    // (Usamos las sintaxix objeto[propiedad]) porque el nombre de la propiedad lo tenemos en una variable.)\n    const componenteVista = await enrutador.rutas[path]\n    // Si existe la vista la podremos cargar\n    if (componenteVista) {\n      // Obtenemos el objeto del componente (que fu\xe9 exportado como default)\n      const vista = await componenteVista.default\n      // inyectamos vista y ejecutamos su script\n      document.querySelector('main').innerHTML = vista.template\n      // A los script les pasamos el parametro que hemos extraido de la ruta. As\xed podemos pasar, por ejemplo, el id de un proyecto\n      vista.script(parametro)\n    }else{\n      // Si la vista no existe cargamos la p\xe1gina de error\n      window.location = '#/404'\n    }\n  },\n")),(0,o.kt)("p",null,"El c\xf3digo completo de nuestro objeto enrutador.js quedar\xeda as\xed:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="enrutador.js"',title:'"enrutador.js"'},"  \nexport const enrutador = {\n\n  // Objeto (diccionario) con todas las rutas y su vista asociada\n  rutas: {\n    home: import('../vistas/homeVista.js'),\n    // Usuarios\n    admin: import('../vistas/adminVista.js'),\n    registro: import('../vistas/registroVista.js'),\n    login: import('../vistas/loginVista.js'),\n    // Proyectos\n    proyectos: import('../vistas/proyectosVista.js'),\n    proyectoNuevo: import('../vistas/proyectoNuevoVista.js'),\n    proyectoEditar: import('../vistas/proyectoEditarVista.js'),\n    proyectoDetalle: import('../vistas/proyectoDetalleVista.js'),\n    404: import('../vistas/404.js')\n  },\n\n  // M\xe9todo que obtiene la ruta del navegador\n  router: async () => {\n    // Capturamos el hash # que ha cambiado en la url\n    const pathCompleto = window.location.hash\n    // Separamos la ruta del posible parametro que reciba\n    const path = pathCompleto.split('/')[1]\n    const parametro = pathCompleto.split('/')[2]\n\n    // capturamos el componente con ese nombre de la vista\n    // (Usamos las sintaxix objeto[propiedad]) porque el nombre de la propiedad lo tenemos en una variable.)\n    const componenteVista = await enrutador.rutas[path]\n    // Si existe la vista la podremos cargar\n    if (componenteVista) {\n      // try {\n      // Obtenemos el objeto del componente (que fu\xe9 exportado como default)\n      const vista = await componenteVista.default\n      // inyectamos vista y ejecutamos su script\n      document.querySelector('main').innerHTML = vista.template\n      // A los script les pasamos el parametro que hemos extraido de la ruta. As\xed podemos pasar, por ejemplo, el id de un proyecto\n      vista.script(parametro)\n    } else {\n      window.location = '#/404'\n    }\n  },\n\n  // Capturamos los eventos\n  observadorRutas: () => {\n    document.body.addEventListener('click', event => {\n      // Evitamos que se cargue la p\xe1gina\n      const link = event.target\n      if (link.classList.contains('router-link')) {\n        console.log('router-link')\n        event.preventDefault()\n        // Obtenemos la ruta del enlace sin el .html\n        const href = link.getAttribute('href')\n        // A\xf1adimos la nueva ruta al historial\n\n        // (El m\xe9todo pushState() permite agregar un nuevo estado a la pila del historial del navegador. Esto significa que una nueva entrada de historial se agrega a la pila y la URL del navegador se actualiza sin recargar la p\xe1gina.)\n        window.history.pushState({ path: href }, '', href)\n        // y ejecutamos el router de nuevo para que detecte los cambios con el evento popstate\n        enrutador.router()\n      }\n    })\n\n    // Detectamos cuando alguien navega por el historial con los botones avanzar y retroceder del navegador.\n    window.addEventListener('popstate', (e) => {\n      console.log('evento popstate - Te est\xe1s moviendo por el historial')\n      enrutador.router()\n    })\n  }\n}\n\n")),(0,o.kt)("p",null,"Ahora solo faltar\xeda a\xf1adir a la p\xe1gina principal ",(0,o.kt)("inlineCode",{parentName:"p"},"main.js")," una llamada al m\xe9todo observadorRutas() de nuestro objeto para que escuche los posibles eventos."),(0,o.kt)("p",null,"Tambien vamos a eliminar la inyecci\xf3n manual que hac\xedamos sobre la etiqueta main para usar ",(0,o.kt)("inlineCode",{parentName:"p"},"windows.location = '#/home'")," y asociar as\xed la vista home a la raiz de la app."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="main.js" {17,19}',title:'"main.js"',"{17,19}":!0},"// Import our custom CSS\nimport './scss/styles.scss'\n// Import all of Bootstrap's JS\nimport * as bootstrap from 'bootstrap'\n\n// Importamos componentes header y footer\nimport { header } from './componentes/header'\nimport { footer } from './componentes/footer'\n\n// Importamos la Funci\xf3n para detectar eventos al cargar las vistas\nimport { enrutador } from './componentes/enrutador'\n\ndocument.querySelector('#header').innerHTML = header.template\nheader.script()\ndocument.querySelector('#footer').innerHTML = footer.template\n\nenrutador.observadorRutas()\n// Cargamos la p\xe1gina home\nwindow.location = '#/home'\n")),(0,o.kt)("p",null,"Si modificamos la barra de navegaci\xf3n de nuestra aplicaci\xf3n escribiendo, por ejemplo ",(0,o.kt)("inlineCode",{parentName:"p"},"http://localhost:5173/#/registro")," veremos como se actualiza la vista."),(0,o.kt)("p",null,"Tambi\xe9n podemos hacer clic sobre la flecha atras de la barra de navegaci\xf3n. Podremos comprobar que volvemos a la vista #/home."),(0,o.kt)("p",null,"Finalmente, para verificar que los enlaces funcionan vamos a modificar el ",(0,o.kt)("strong",{parentName:"p"},"atributo ",(0,o.kt)("inlineCode",{parentName:"strong"},"href"))," de los enlaces del componente header y a vamos a a\xf1adirles la ",(0,o.kt)("strong",{parentName:"p"},"clase 'router-link'")," para ver si la navegaci\xf3n funciona correctamente."),(0,o.kt)("admonition",{title:"Nota",type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Hemos cambido los botones de inicio de sesi\xf3n y registrate por etiquetas ",(0,o.kt)("inlineCode",{parentName:"p"},"<a></a>")," para facilitar el comportamiento de carga de vistas.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="enlace bot\xf3n home"',title:'"enlace',"bot\xf3n":!0,'home"':!0},'<a class="navbar-brand" href="#/home"\n  ><img\n    src="images/logo.svg"\n    alt=""\n    width="30"\n    height="24"\n    class="d-inline-block align-text-top router-link"\n  />\n  Vanilla Games</a\n>\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="menu" {4,15,21}',title:'"menu"',"{4,15,21}":!0},'<div class="collapse navbar-collapse" id="navbarSupportedContent">\n  <ul class="navbar-nav mx-auto mb-2 mb-lg-0">\n    <li class="nav-item">\n      <a class="nav-link active router-link" aria-current="page" href="#/home">Home</a>\n    </li>\n    <li class="nav-item">\n      <a class="nav-link router-link" aria-current="page" href="#">TOP5 Proyectos</a>\n    </li>\n    <li class="nav-item">\n      <a class="nav-link router-link" aria-current="page" href="#">A cerca de</a>\n    </li>\n  </ul>\n  <ul class="navbar-nav ms-auto me-2 mb-2 mb-lg-0">\n    <li class="nav-item">\n      <a class="ms-2 btn btn-success router-link" href="#/login">\n        Iniciar sesi\xf3n\n        <i class="bi bi-box-arrow-in-right"></i>\n      </a>\n    </li>\n    <li class="nav-item">\n      <a class="ms-2 btn btn-outline-light router-link" href="#/registro">\n        Reg\xedstrate\n        <i class="bi bi-box-arrow-in-right"></i>\n      </a>\n    </li>\n  </ul>\n')),(0,o.kt)("p",null,"Es el momento de probar todos nuestros enlaces... \xbfFuncionan?"))}c.isMDXComponent=!0}}]);