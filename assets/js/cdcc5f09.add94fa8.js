"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6195],{3905:(e,a,t)=>{t.d(a,{Zo:()=>p,kt:()=>g});var r=t(7294);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function s(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?s(Object(t),!0).forEach((function(a){n(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function l(e,a){if(null==e)return{};var t,r,n=function(e,a){if(null==e)return{};var t,r,n={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var i=r.createContext({}),c=function(e){var a=r.useContext(i),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},p=function(e){var a=c(e.components);return r.createElement(i.Provider,{value:a},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},m=r.forwardRef((function(e,a){var t=e.components,n=e.mdxType,s=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(t),m=n,g=d["".concat(i,".").concat(m)]||d[m]||u[m]||s;return t?r.createElement(g,o(o({ref:a},p),{},{components:t})):r.createElement(g,o({ref:a},p))}));function g(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var s=t.length,o=new Array(s);o[0]=m;var l={};for(var i in a)hasOwnProperty.call(a,i)&&(l[i]=a[i]);l.originalType=e,l[d]="string"==typeof e?e:n,o[1]=l;for(var c=2;c<s;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3848:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>i,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var r=t(7462),n=(t(7294),t(3905));const s={Title:"Dise\xf1o del diagrama de clases"},o=void 0,l={unversionedId:"Version 1.0/SPRINT 4 - BACKEND/Dise\xf1o del diagrama de clases",id:"Version 1.0/SPRINT 4 - BACKEND/Dise\xf1o del diagrama de clases",title:"Dise\xf1o del diagrama de clases",description:"Clases para el ORM",source:"@site/docs/03-Version 1.0/SPRINT 4 - BACKEND/03-Dise\xf1o del diagrama de clases.md",sourceDirName:"03-Version 1.0/SPRINT 4 - BACKEND",slug:"/Version 1.0/SPRINT 4 - BACKEND/Dise\xf1o del diagrama de clases",permalink:"/vanillaPill/docs/Version 1.0/SPRINT 4 - BACKEND/Dise\xf1o del diagrama de clases",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/03-Version 1.0/SPRINT 4 - BACKEND/03-Dise\xf1o del diagrama de clases.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{Title:"Dise\xf1o del diagrama de clases"},sidebar:"tutorialSidebar",previous:{title:"Diagrama de clases y mapping",permalink:"/vanillaPill/docs/Version 1.0/SPRINT 4 - BACKEND/Diagrama de clases y mapping"},next:{title:"Construcci\xf3n de tablas y usuarios",permalink:"/vanillaPill/docs/Version 1.0/SPRINT 4 - BACKEND/Construcci\xf3n de tablas y usuarios"}},i={},c=[{value:"Clases para el ORM",id:"clases-para-el-orm",level:2}],p={toc:c},d="wrapper";function u(e){let{components:a,...t}=e;return(0,n.kt)(d,(0,r.Z)({},p,t,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"clases-para-el-orm"},"Clases para el ORM"),(0,n.kt)("p",null,"En primer lugar vamos a ",(0,n.kt)("strong",{parentName:"p"},"construir las clases")," necesarias para crear nuestro ",(0,n.kt)("strong",{parentName:"p"},"ORM"),"."),(0,n.kt)("p",null,"Cada clase va a tener:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"unas ",(0,n.kt)("strong",{parentName:"li"},"propiedades")," que se corresponder\xe1n con los campos de la tabla a la que est\xe1 asociada"),(0,n.kt)("li",{parentName:"ul"},"unos ",(0,n.kt)("strong",{parentName:"li"},"m\xe9todos")," que permitiran el acceso y manipulaci\xf3n de los datos de dicha tabla")),(0,n.kt)("p",null,"Por lo tanto, en esta versi\xf3n, necesitamos tres clases. La clase ",(0,n.kt)("strong",{parentName:"p"},"users"),", la clase ",(0,n.kt)("strong",{parentName:"p"},"perfiles")," y la clase ",(0,n.kt)("strong",{parentName:"p"},"proyectos"),"."),(0,n.kt)("p",null,"Los m\xe9todos b\xe1sico que suelen utilizarse en un ORM comprenden las funcionalidades propias de un ",(0,n.kt)("strong",{parentName:"p"},"CRUD (Create, Read, Update y Delete)"),". Nosotros usaremos los siguientes:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"getAll"),": Devolvera un objeto con todos los registros de la tabla."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"getById"),": Devolver\xe1 un objeto con los datos del registro que coincida con el campo ",(0,n.kt)("em",{parentName:"li"},"id"),"."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"getByUserId"),": Devolver\xe1 un objeto con los datos del registro que coincida con el campo ",(0,n.kt)("em",{parentName:"li"},"user_id"),"."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"create"),": Crear\xe1 una nueva fila con los campos que le pasemos."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"update"),": Actualizar\xe1 la fila correspondiente al registro cuyo campo id coincida con el que le pasemos, con los campos que le pasemos.")),(0,n.kt)("p",null,"El diagrama de clases para la clase perfiles quedar\xeda de la siguiente manera:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-text"},"+-------------------------------------------------------+\n|              Perfiles                                  |\n+-------------------------------------------------------+\n| - id: number                                          |\n| - created_at: string                                  |\n| - nombre: string                                      |\n| - apellidos: string                                   |\n| - user_id: number                                     |\n| - estado: string                                      |\n| - rol: string                                         |\n| - avatar: string                                      |\n+-------------------------------------------------------+\n| + constructor(data: object)                           |\n| + static getAll(): Perfil[]                           |\n| + static getById(id: number): Perfil                  |\n| + static getByUserId(id: number): Perfil              |\n| + static create(perfilData: object): boolean          |\n| + static update(id: number, newData: object): boolean |\n+-------------------------------------------------------+\n\n")),(0,n.kt)("p",null,"En este diagrama:"),(0,n.kt)("p",null,"La ",(0,n.kt)("strong",{parentName:"p"},"clase"),' "Perfil" representa los perfiles de tu sistema, con atributos correspondientes a las columnas en la base de datos.'),(0,n.kt)("p",null,"Los ",(0,n.kt)("strong",{parentName:"p"},"m\xe9todos est\xe1ticos")," (como getAll, getById, create, update) se pueden llamar directamente en la clase sin crear una instancia previa."),(0,n.kt)("p",null,"Los ",(0,n.kt)("strong",{parentName:"p"},"atributos"),' (id, created_at, nombre, etc.) son privados (indicados por el "-") y se inicializan en el constructor.'),(0,n.kt)("p",null,"El m\xe9todo ",(0,n.kt)("strong",{parentName:"p"},"constructor")," se utiliza para crear una instancia de la clase Perfil a partir de un objeto con datos."),(0,n.kt)("p",null,"Vamos a representar todas las clases juntas indicando como ser relacionan entre s\xed:\n",(0,n.kt)("a",{parentName:"p",href:"https://gitmind.com/app/docs/fgi5pva1"},"https://gitmind.com/app/docs/fgi5pva1")))}u.isMDXComponent=!0}}]);