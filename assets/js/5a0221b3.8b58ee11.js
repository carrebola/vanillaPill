"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5837],{3905:(e,r,n)=>{n.d(r,{Zo:()=>c,kt:()=>m});var a=n(7294);function t(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function l(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?l(Object(n),!0).forEach((function(r){t(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function i(e,r){if(null==e)return{};var n,a,t=function(e,r){if(null==e)return{};var n,a,t={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],r.indexOf(n)>=0||(t[n]=e[n]);return t}(e,r);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var s=a.createContext({}),p=function(e){var r=a.useContext(s),n=r;return e&&(n="function"==typeof e?e(r):o(o({},r),e)),n},c=function(e){var r=p(e.components);return a.createElement(s.Provider,{value:r},e.children)},f="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return a.createElement(a.Fragment,{},r)}},d=a.forwardRef((function(e,r){var n=e.components,t=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),f=p(n),d=t,m=f["".concat(s,".").concat(d)]||f[d]||u[d]||l;return n?a.createElement(m,o(o({ref:r},c),{},{components:n})):a.createElement(m,o({ref:r},c))}));function m(e,r){var n=arguments,t=r&&r.mdxType;if("string"==typeof e||t){var l=n.length,o=new Array(l);o[0]=d;var i={};for(var s in r)hasOwnProperty.call(r,s)&&(i[s]=r[s]);i.originalType=e,i[f]="string"==typeof e?e:t,o[1]=i;for(var p=2;p<l;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7064:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var a=n(7462),t=(n(7294),n(3905));const l={},o="Testeando la clase Perfil",i={unversionedId:"Version 1.0/SPRINT 4 - BACKEND/ORM para el mapping en javascript/Perfil.test",id:"Version 1.0/SPRINT 4 - BACKEND/ORM para el mapping en javascript/Perfil.test",title:"Testeando la clase Perfil",description:"A continuaci\xf3n vemos el archivo con los todos los test. La explicaci\xf3n de lo que hace cada l\xednea la puedes encontrar en los comentarios que hay insertados.",source:"@site/docs/03-Version 1.0/SPRINT 4 - BACKEND/07-ORM para el mapping en javascript/04-Perfil.test.md",sourceDirName:"03-Version 1.0/SPRINT 4 - BACKEND/07-ORM para el mapping en javascript",slug:"/Version 1.0/SPRINT 4 - BACKEND/ORM para el mapping en javascript/Perfil.test",permalink:"/vanillaPill/docs/Version 1.0/SPRINT 4 - BACKEND/ORM para el mapping en javascript/Perfil.test",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/03-Version 1.0/SPRINT 4 - BACKEND/07-ORM para el mapping en javascript/04-Perfil.test.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Testeando la clase User",permalink:"/vanillaPill/docs/Version 1.0/SPRINT 4 - BACKEND/ORM para el mapping en javascript/User.test"},next:{title:"Testeando la clase Proyectos",permalink:"/vanillaPill/docs/Version 1.0/SPRINT 4 - BACKEND/ORM para el mapping en javascript/Proyecto.test"}},s={},p=[],c={toc:p},f="wrapper";function u(e){let{components:r,...n}=e;return(0,t.kt)(f,(0,a.Z)({},c,n,{components:r,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"testeando-la-clase-perfil"},"Testeando la clase Perfil"),(0,t.kt)("p",null,"A continuaci\xf3n vemos el archivo con los todos los test. La explicaci\xf3n de lo que hace cada l\xednea la puedes encontrar en los comentarios que hay insertados."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="perfil.test.js"',title:'"perfil.test.js"'},"//Cargamos libreria de testing\nimport  { expect } from 'chai'\n\n//cargamos libreria de supabase\nimport { supabase } from '../src/bd/supabase.js';\n//Cargamos la clase Perfil\nimport { Perfil } from '../src/bd/perfil.js';\n\n// Datos para el nuevo perfil\nconst ArrayPerfiles = [\n  {\n    nombre: 'carrebola',\n    apellidos: 'Yo mismo',\n    rol: 'admin'\n  },\n  {\n    nombre: 'Pepe',\n    apellidos: 'Gotera',\n    rol: 'registrado'      \n  },\n  {\n    nombre: 'Juan',\n    apellidos: 'Eustaquio',\n    rol: 'alumno'      \n  },\n  {\n    nombre: 'Iban',\n    apellidos: 'A borrarme',\n    rol: 'alumno'\n  }\n]\n\n//Testeando la clase perfil\n//Inicialmente no tenemos usuarios registrados as\xed que Borramos toda la tabla perfil\n\ntry {\n  const { data, error } = await supabase\n  .from('perfiles')\n  .delete()\n  .is('user_id', null)\n} catch (error) {\n  console.error(error)\n}\n\ndescribe('************** Perfil: Crearemos 4 usuarios con diferentes rols. El \xfaltimo lo leerermos, modificaremos y borraremos', async function() {\n\n  describe('getAll()', async function() {    \n    it('deber\xeda devolver un array de perfiles vac\xedo', async function() {\n      //Probamos el m\xe9todo getAll\n      const perfiles = await Perfil.getAll()\n      //Esperamos que devuelva un array\n      expect(perfiles).to.be.an('array')\n      //Esperamos que el array est\xe9 vac\xedo\n      expect(perfiles.length).to.equal(0)\n    })\n  })\n\n\n  describe('create()', async function() {\n    it('deber\xeda crear un nuevo perfil en la tabla \"perfiles\"', async function() {\n      \n      //Objeto que deber\xeda devolver tras crear el usuario \n      const perfilDevuelto = {\n        nombre: 'Iban',\n        apellidos: 'A borrarme',\n        user_id: null,\n        estado: 'pendiente',\n        rol: 'alumno',\n        avatar: null\n      }\n\n      // Crear el nuevo perfil\n      await Perfil.create(ArrayPerfiles[0])\n      await Perfil.create(ArrayPerfiles[1])\n      await Perfil.create(ArrayPerfiles[2])\n      await Perfil.create(ArrayPerfiles[3])\n\n\n      // Verificar que se ha creado el perfil correctamente. (Solo el \xfaltimo perfil)\n      //Leemos todos los perfiles \n      const perfiles = await Perfil.getAll()\n      //Comprobamos que devuelve un array\n      expect(perfiles).to.be.an('array')\n      //Comprobamos que el array tiene 4 registros\n      expect(perfiles.length).to.equal(4)\n      //Comprobamos que el \xfaltimo registro tiene los datos del modelo esperado\n      expect(perfiles[3]).to.include(perfilDevuelto)\n    })\n  })\n\n  describe('getById()', function() {\n    it('deber\xeda devolver el perfil con el ID correspondiente', async function() {\n      // Capturamos todos los perfiles\n      const perfiles = await Perfil.getAll()\n      //Buscamos la posici\xf3n del \xfaltimo registro\n      const ultimoPerfil = perfiles.length - 1\n      //capturamos su id\n      const perfilId = perfiles[ultimoPerfil].id\n\n      // Obtener el perfil por ID\n      const perfil = await Perfil.getById(perfilId)\n      //Esperamos que devuelva un instanicia de objeto\n      expect(perfil).to.be.an.instanceof(Perfil)\n      //Esperamos que el email coincida \n      expect(perfil.email).equal(ArrayPerfiles[3].email)\n    })\n  })\n\n  \n\n  describe('actualizarPerfil', () => {\n    it('deber\xeda actualizar el nombre y apellido del perfil', async () => {\n      // Capturamos todos los perfiles\n      const perfiles = await Perfil.getAll()\n      //Buscamos la posici\xf3n del \xfaltimo registro\n      const ultimoPerfil = perfiles.length - 1\n      //capturamos su id\n      const perfilId = perfiles[ultimoPerfil].id\n\n      // Obtener el perfil por ID\n      const perfil = await Perfil.getById(perfilId)\n      \n      //Actualizamos los datos\n      perfil.nombre = 'Jose'\n      perfil.apellidos = 'GoteraNueva'\n    \n      //Llamamos al m\xe9todo actualizar\n      await perfil.update()\n      //Volvemos a leer el perfil modificado\n      const perfilActualizado = await Perfil.getById(perfilId)\n      \n      //Esperamos que el nombre haya cambiado\n      expect(perfilActualizado.nombre).to.equal('Jose')\n      //Esperamos que el apellido haya cambiado\n      expect(perfilActualizado.apellidos).to.equal('GoteraNueva')\n    });\n\n  });\n\n  //Borrar perfil\n  describe('borraPerfil', () => {\n      it('deber\xeda borrar el \xfaltimo perfil creado', async () => {\n        // Capturamos todos los perfiles\n        let perfiles = await Perfil.getAll()\n        //Buscamos la posici\xf3n del \xfaltimo registro\n        let ultimoPerfil = perfiles.length - 1\n        //capturamos su id\n        let perfilId = perfiles[ultimoPerfil].id\n\n        // Obtener el perfil por ID\n        let perfil = await Perfil.getById(perfilId)\n        \n        //Borramos el perfil\n        const borrado = await Perfil.delete(perfilId) \n        //Esperamos que el m\xe9todo devuelva true\n        expect(borrado).to.equal(true)\n        //verificamos que efectivamente hay un registro menos\n        perfiles = await Perfil.getAll()\n        expect(perfiles.length).to.equal(3)\n      \n      })\n\n   })\n})\n\n//exportamos los datos de perfiles\n\n\n")))}u.isMDXComponent=!0}}]);